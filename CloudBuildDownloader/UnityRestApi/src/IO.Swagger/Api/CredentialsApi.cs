/* 
 * Unity Cloud Build
 *
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICredentialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload Android Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 AddCredentialsAndroid (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass);

        /// <summary>
        /// Upload Android Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> AddCredentialsAndroidWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass);
        /// <summary>
        /// Upload iOS Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 AddCredentialsIos (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null);

        /// <summary>
        /// Upload iOS Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> AddCredentialsIosWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null);
        /// <summary>
        /// Delete Android Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>string</returns>
        string DeleteAndroid (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Delete Android Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteAndroidWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Delete iOS Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>string</returns>
        string DeleteIos (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Delete iOS Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteIosWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Get All Android Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>List&lt;InlineResponse20013&gt;</returns>
        List<InlineResponse20013> GetAllAndroid (string orgid, string projectid);

        /// <summary>
        /// Get All Android Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20013&gt;</returns>
        ApiResponse<List<InlineResponse20013>> GetAllAndroidWithHttpInfo (string orgid, string projectid);
        /// <summary>
        /// Get All iOS Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        List<InlineResponse20014> GetAllIos (string orgid, string projectid);

        /// <summary>
        /// Get All iOS Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        ApiResponse<List<InlineResponse20014>> GetAllIosWithHttpInfo (string orgid, string projectid);
        /// <summary>
        /// Get Android Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific android credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetOneAndroid (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Get Android Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific android credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetOneAndroidWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Get iOS Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific iOS credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetOneIos (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Get iOS Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific iOS credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetOneIosWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Update Android Credentials
        /// </summary>
        /// <remarks>
        /// Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 UpdateAndroid (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null);

        /// <summary>
        /// Update Android Credentials
        /// </summary>
        /// <remarks>
        /// Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> UpdateAndroidWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null);
        /// <summary>
        /// Update iOS Credentials
        /// </summary>
        /// <remarks>
        /// Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 UpdateIos (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null);

        /// <summary>
        /// Update iOS Credentials
        /// </summary>
        /// <remarks>
        /// Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> UpdateIosWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Upload Android Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> AddCredentialsAndroidAsync (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass);

        /// <summary>
        /// Upload Android Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> AddCredentialsAndroidAsyncWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass);
        /// <summary>
        /// Upload iOS Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> AddCredentialsIosAsync (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null);

        /// <summary>
        /// Upload iOS Credentials
        /// </summary>
        /// <remarks>
        /// Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> AddCredentialsIosAsyncWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null);
        /// <summary>
        /// Delete Android Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteAndroidAsync (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Delete Android Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteAndroidAsyncWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Delete iOS Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteIosAsync (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Delete iOS Credentials
        /// </summary>
        /// <remarks>
        /// Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteIosAsyncWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Get All Android Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of List&lt;InlineResponse20013&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20013>> GetAllAndroidAsync (string orgid, string projectid);

        /// <summary>
        /// Get All Android Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20013&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20013>>> GetAllAndroidAsyncWithHttpInfo (string orgid, string projectid);
        /// <summary>
        /// Get All iOS Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20014>> GetAllIosAsync (string orgid, string projectid);

        /// <summary>
        /// Get All iOS Credentials
        /// </summary>
        /// <remarks>
        /// Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> GetAllIosAsyncWithHttpInfo (string orgid, string projectid);
        /// <summary>
        /// Get Android Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific android credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetOneAndroidAsync (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Get Android Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific android credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetOneAndroidAsyncWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Get iOS Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific iOS credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetOneIosAsync (string orgid, string projectid, string credentialid);

        /// <summary>
        /// Get iOS Credential Details
        /// </summary>
        /// <remarks>
        /// Get specific iOS credential details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetOneIosAsyncWithHttpInfo (string orgid, string projectid, string credentialid);
        /// <summary>
        /// Update Android Credentials
        /// </summary>
        /// <remarks>
        /// Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> UpdateAndroidAsync (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null);

        /// <summary>
        /// Update Android Credentials
        /// </summary>
        /// <remarks>
        /// Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> UpdateAndroidAsyncWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null);
        /// <summary>
        /// Update iOS Credentials
        /// </summary>
        /// <remarks>
        /// Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> UpdateIosAsync (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null);

        /// <summary>
        /// Update iOS Credentials
        /// </summary>
        /// <remarks>
        /// Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> UpdateIosAsyncWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CredentialsApi : ICredentialsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CredentialsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CredentialsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Upload Android Credentials Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 AddCredentialsAndroid (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass)
        {
             ApiResponse<InlineResponse20013> localVarResponse = AddCredentialsAndroidWithHttpInfo(orgid, projectid, label, file, alias, keypass, storepass);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Android Credentials Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > AddCredentialsAndroidWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'keypass' is set
            if (keypass == null)
                throw new ApiException(400, "Missing required parameter 'keypass' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'storepass' is set
            if (storepass == null)
                throw new ApiException(400, "Missing required parameter 'storepass' when calling CredentialsApi->AddCredentialsAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (alias != null) localVarFormParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // form parameter
            if (keypass != null) localVarFormParams.Add("keypass", Configuration.ApiClient.ParameterToString(keypass)); // form parameter
            if (storepass != null) localVarFormParams.Add("storepass", Configuration.ApiClient.ParameterToString(storepass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentialsAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Upload Android Credentials Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> AddCredentialsAndroidAsync (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await AddCredentialsAndroidAsyncWithHttpInfo(orgid, projectid, label, file, alias, keypass, storepass);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload Android Credentials Upload a new android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credential</param>
        /// <param name="file">Keystore file</param>
        /// <param name="alias">Keystore alias</param>
        /// <param name="keypass">Keystore keypass</param>
        /// <param name="storepass">Keystore storepass</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> AddCredentialsAndroidAsyncWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream file, string alias, string keypass, string storepass)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'keypass' is set
            if (keypass == null)
                throw new ApiException(400, "Missing required parameter 'keypass' when calling CredentialsApi->AddCredentialsAndroid");
            // verify the required parameter 'storepass' is set
            if (storepass == null)
                throw new ApiException(400, "Missing required parameter 'storepass' when calling CredentialsApi->AddCredentialsAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (alias != null) localVarFormParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // form parameter
            if (keypass != null) localVarFormParams.Add("keypass", Configuration.ApiClient.ParameterToString(keypass)); // form parameter
            if (storepass != null) localVarFormParams.Add("storepass", Configuration.ApiClient.ParameterToString(storepass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentialsAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Upload iOS Credentials Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 AddCredentialsIos (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = AddCredentialsIosWithHttpInfo(orgid, projectid, label, fileCertificate, fileProvisioningProfile, certificatePass);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload iOS Credentials Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > AddCredentialsIosWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'fileCertificate' is set
            if (fileCertificate == null)
                throw new ApiException(400, "Missing required parameter 'fileCertificate' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'fileProvisioningProfile' is set
            if (fileProvisioningProfile == null)
                throw new ApiException(400, "Missing required parameter 'fileProvisioningProfile' when calling CredentialsApi->AddCredentialsIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (fileCertificate != null) localVarFileParams.Add("fileCertificate", Configuration.ApiClient.ParameterToFile("fileCertificate", fileCertificate));
            if (fileProvisioningProfile != null) localVarFileParams.Add("fileProvisioningProfile", Configuration.ApiClient.ParameterToFile("fileProvisioningProfile", fileProvisioningProfile));
            if (certificatePass != null) localVarFormParams.Add("certificatePass", Configuration.ApiClient.ParameterToString(certificatePass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentialsIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Upload iOS Credentials Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> AddCredentialsIosAsync (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await AddCredentialsIosAsyncWithHttpInfo(orgid, projectid, label, fileCertificate, fileProvisioningProfile, certificatePass);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload iOS Credentials Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="label">Label for the uploaded credentials</param>
        /// <param name="fileCertificate">Certificate file (.p12)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> AddCredentialsIosAsyncWithHttpInfo (string orgid, string projectid, string label, System.IO.Stream fileCertificate, System.IO.Stream fileProvisioningProfile, string certificatePass = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'fileCertificate' is set
            if (fileCertificate == null)
                throw new ApiException(400, "Missing required parameter 'fileCertificate' when calling CredentialsApi->AddCredentialsIos");
            // verify the required parameter 'fileProvisioningProfile' is set
            if (fileProvisioningProfile == null)
                throw new ApiException(400, "Missing required parameter 'fileProvisioningProfile' when calling CredentialsApi->AddCredentialsIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (fileCertificate != null) localVarFileParams.Add("fileCertificate", Configuration.ApiClient.ParameterToFile("fileCertificate", fileCertificate));
            if (fileProvisioningProfile != null) localVarFileParams.Add("fileProvisioningProfile", Configuration.ApiClient.ParameterToFile("fileProvisioningProfile", fileProvisioningProfile));
            if (certificatePass != null) localVarFormParams.Add("certificatePass", Configuration.ApiClient.ParameterToString(certificatePass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentialsIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Delete Android Credentials Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>string</returns>
        public string DeleteAndroid (string orgid, string projectid, string credentialid)
        {
             ApiResponse<string> localVarResponse = DeleteAndroidWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Android Credentials Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteAndroidWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->DeleteAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->DeleteAndroid");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->DeleteAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Android Credentials Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteAndroidAsync (string orgid, string projectid, string credentialid)
        {
             ApiResponse<string> localVarResponse = await DeleteAndroidAsyncWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Android Credentials Delete specific android credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteAndroidAsyncWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->DeleteAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->DeleteAndroid");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->DeleteAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete iOS Credentials Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>string</returns>
        public string DeleteIos (string orgid, string projectid, string credentialid)
        {
             ApiResponse<string> localVarResponse = DeleteIosWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete iOS Credentials Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteIosWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->DeleteIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->DeleteIos");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->DeleteIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete iOS Credentials Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteIosAsync (string orgid, string projectid, string credentialid)
        {
             ApiResponse<string> localVarResponse = await DeleteIosAsyncWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete iOS Credentials Delete specific ios credentials for a project. NOTE: you must be a manager in the project&#39;s organization to delete credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteIosAsyncWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->DeleteIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->DeleteIos");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->DeleteIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get All Android Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>List&lt;InlineResponse20013&gt;</returns>
        public List<InlineResponse20013> GetAllAndroid (string orgid, string projectid)
        {
             ApiResponse<List<InlineResponse20013>> localVarResponse = GetAllAndroidWithHttpInfo(orgid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Android Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20013&gt;</returns>
        public ApiResponse< List<InlineResponse20013> > GetAllAndroidWithHttpInfo (string orgid, string projectid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetAllAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetAllAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20013>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20013>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20013>)));
        }

        /// <summary>
        /// Get All Android Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of List&lt;InlineResponse20013&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20013>> GetAllAndroidAsync (string orgid, string projectid)
        {
             ApiResponse<List<InlineResponse20013>> localVarResponse = await GetAllAndroidAsyncWithHttpInfo(orgid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Android Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20013&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20013>>> GetAllAndroidAsyncWithHttpInfo (string orgid, string projectid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetAllAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetAllAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20013>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20013>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20013>)));
        }

        /// <summary>
        /// Get All iOS Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        public List<InlineResponse20014> GetAllIos (string orgid, string projectid)
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = GetAllIosWithHttpInfo(orgid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All iOS Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        public ApiResponse< List<InlineResponse20014> > GetAllIosWithHttpInfo (string orgid, string projectid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetAllIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetAllIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20014>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        /// Get All iOS Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20014>> GetAllIosAsync (string orgid, string projectid)
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = await GetAllIosAsyncWithHttpInfo(orgid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All iOS Credentials Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> GetAllIosAsyncWithHttpInfo (string orgid, string projectid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetAllIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetAllIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20014>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        /// Get Android Credential Details Get specific android credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetOneAndroid (string orgid, string projectid, string credentialid)
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetOneAndroidWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Android Credential Details Get specific android credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GetOneAndroidWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetOneAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetOneAndroid");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->GetOneAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOneAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Get Android Credential Details Get specific android credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetOneAndroidAsync (string orgid, string projectid, string credentialid)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetOneAndroidAsyncWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Android Credential Details Get specific android credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetOneAndroidAsyncWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetOneAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetOneAndroid");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->GetOneAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOneAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Get iOS Credential Details Get specific iOS credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetOneIos (string orgid, string projectid, string credentialid)
        {
             ApiResponse<InlineResponse20014> localVarResponse = GetOneIosWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get iOS Credential Details Get specific iOS credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > GetOneIosWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetOneIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetOneIos");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->GetOneIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOneIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Get iOS Credential Details Get specific iOS credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GetOneIosAsync (string orgid, string projectid, string credentialid)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await GetOneIosAsyncWithHttpInfo(orgid, projectid, credentialid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get iOS Credential Details Get specific iOS credential details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetOneIosAsyncWithHttpInfo (string orgid, string projectid, string credentialid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->GetOneIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->GetOneIos");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->GetOneIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOneIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Update Android Credentials Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 UpdateAndroid (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = UpdateAndroidWithHttpInfo(orgid, projectid, credentialid, label, file, alias, keypass, storepass);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Android Credentials Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > UpdateAndroidWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->UpdateAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->UpdateAndroid");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->UpdateAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (alias != null) localVarFormParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // form parameter
            if (keypass != null) localVarFormParams.Add("keypass", Configuration.ApiClient.ParameterToString(keypass)); // form parameter
            if (storepass != null) localVarFormParams.Add("storepass", Configuration.ApiClient.ParameterToString(storepass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Update Android Credentials Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> UpdateAndroidAsync (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await UpdateAndroidAsyncWithHttpInfo(orgid, projectid, credentialid, label, file, alias, keypass, storepass);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Android Credentials Update an android keystore for the project. NOTE: you must be a manager in the project&#39;s organization to add new credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the uploaded credential (optional)</param>
        /// <param name="file">Keystore file (optional)</param>
        /// <param name="alias">Keystore alias (optional)</param>
        /// <param name="keypass">Keystore keypass (optional)</param>
        /// <param name="storepass">Keystore storepass (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> UpdateAndroidAsyncWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream file = null, string alias = null, string keypass = null, string storepass = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->UpdateAndroid");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->UpdateAndroid");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->UpdateAndroid");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (alias != null) localVarFormParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // form parameter
            if (keypass != null) localVarFormParams.Add("keypass", Configuration.ApiClient.ParameterToString(keypass)); // form parameter
            if (storepass != null) localVarFormParams.Add("storepass", Configuration.ApiClient.ParameterToString(storepass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAndroid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Update iOS Credentials Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 UpdateIos (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = UpdateIosWithHttpInfo(orgid, projectid, credentialid, label, fileCertificate, fileProvisioningProfile, certificatePass);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update iOS Credentials Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > UpdateIosWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->UpdateIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->UpdateIos");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->UpdateIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (fileCertificate != null) localVarFileParams.Add("fileCertificate", Configuration.ApiClient.ParameterToFile("fileCertificate", fileCertificate));
            if (fileProvisioningProfile != null) localVarFileParams.Add("fileProvisioningProfile", Configuration.ApiClient.ParameterToFile("fileProvisioningProfile", fileProvisioningProfile));
            if (certificatePass != null) localVarFormParams.Add("certificatePass", Configuration.ApiClient.ParameterToString(certificatePass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Update iOS Credentials Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> UpdateIosAsync (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await UpdateIosAsyncWithHttpInfo(orgid, projectid, credentialid, label, fileCertificate, fileProvisioningProfile, certificatePass);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update iOS Credentials Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project&#39;s organization to update credentials. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="credentialid">Credential Identifier</param>
        /// <param name="label">Label for the updated credentials (optional)</param>
        /// <param name="fileCertificate">Certificate file (.p12) (optional)</param>
        /// <param name="fileProvisioningProfile">Provisioning Profile (.mobileprovision) (optional)</param>
        /// <param name="certificatePass">Certificate (.p12) password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> UpdateIosAsyncWithHttpInfo (string orgid, string projectid, string credentialid, string label = null, System.IO.Stream fileCertificate = null, System.IO.Stream fileProvisioningProfile = null, string certificatePass = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling CredentialsApi->UpdateIos");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling CredentialsApi->UpdateIos");
            // verify the required parameter 'credentialid' is set
            if (credentialid == null)
                throw new ApiException(400, "Missing required parameter 'credentialid' when calling CredentialsApi->UpdateIos");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (credentialid != null) localVarPathParams.Add("credentialid", Configuration.ApiClient.ParameterToString(credentialid)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (fileCertificate != null) localVarFileParams.Add("fileCertificate", Configuration.ApiClient.ParameterToFile("fileCertificate", fileCertificate));
            if (fileProvisioningProfile != null) localVarFileParams.Add("fileProvisioningProfile", Configuration.ApiClient.ParameterToFile("fileProvisioningProfile", fileProvisioningProfile));
            if (certificatePass != null) localVarFormParams.Add("certificatePass", Configuration.ApiClient.ParameterToString(certificatePass)); // form parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

    }
}
