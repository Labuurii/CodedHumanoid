/* 
 * Unity Cloud Build
 *
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete artifacts for a batch of builds
        /// </summary>
        /// <remarks>
        /// Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>string</returns>
        string BatchDeleteBuildArtifacts (string orgid, string projectid, Options10 options);

        /// <summary>
        /// Delete artifacts for a batch of builds
        /// </summary>
        /// <remarks>
        /// Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> BatchDeleteBuildArtifactsWithHttpInfo (string orgid, string projectid, Options10 options);
        /// <summary>
        /// Cancel all builds
        /// </summary>
        /// <remarks>
        /// Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>string</returns>
        string CancelAllBuilds (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Cancel all builds
        /// </summary>
        /// <remarks>
        /// Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CancelAllBuildsWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Cancel build
        /// </summary>
        /// <remarks>
        /// Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>string</returns>
        string CancelBuild (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Cancel build
        /// </summary>
        /// <remarks>
        /// Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CancelBuildWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Cancel builds for org
        /// </summary>
        /// <remarks>
        /// Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>string</returns>
        string CancelBuildsForOrg (string orgid);

        /// <summary>
        /// Cancel builds for org
        /// </summary>
        /// <remarks>
        /// Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CancelBuildsForOrgWithHttpInfo (string orgid);
        /// <summary>
        /// Create a new link to share a project
        /// </summary>
        /// <remarks>
        /// Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 CreateShare (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Create a new link to share a project
        /// </summary>
        /// <remarks>
        /// Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> CreateShareWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>string</returns>
        string DeleteAllBuildArtifacts (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteAllBuildArtifactsWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Delete all artifacts associated with a specific build
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>string</returns>
        string DeleteBuildArtifacts (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Delete all artifacts associated with a specific build
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteBuildArtifactsWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of historical settings changes for this build target.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        List<InlineResponse20011> GetAuditLog (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null);

        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of historical settings changes for this build target.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        ApiResponse<List<InlineResponse20011>> GetAuditLogWithHttpInfo (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null);
        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of settings changes between the last and current build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        List<InlineResponse20011> GetAuditLog_0 (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null);

        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of settings changes between the last and current build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        ApiResponse<List<InlineResponse20011>> GetAuditLog_0WithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null);
        /// <summary>
        /// Build Status
        /// </summary>
        /// <remarks>
        /// Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        OrgsorgidprojectsprojectidbuildtargetsBuilds GetBuild (string orgid, string projectid, string buildtargetid, string number, string include = null);

        /// <summary>
        /// Build Status
        /// </summary>
        /// <remarks>
        /// Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>ApiResponse of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuildWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, string include = null);
        /// <summary>
        /// Get build log
        /// </summary>
        /// <remarks>
        /// Retrieve the plain text log for a specifc build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns></returns>
        void GetBuildLog (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null);

        /// <summary>
        /// Get build log
        /// </summary>
        /// <remarks>
        /// Retrieve the plain text log for a specifc build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetBuildLogWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null);
        /// <summary>
        /// List all builds
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        List<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuilds (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);

        /// <summary>
        /// List all builds
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildsWithHttpInfo (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);
        /// <summary>
        /// List all builds for org
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        List<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuildsForOrg (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);

        /// <summary>
        /// List all builds for org
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildsForOrgWithHttpInfo (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);
        /// <summary>
        /// Get the share link
        /// </summary>
        /// <remarks>
        /// Gets a share link if it exists
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetShare (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Get the share link
        /// </summary>
        /// <remarks>
        /// Gets a share link if it exists
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetShareWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Revoke a shared link
        /// </summary>
        /// <remarks>
        /// Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>string</returns>
        string RevokeShare (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Revoke a shared link
        /// </summary>
        /// <remarks>
        /// Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RevokeShareWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Create new build
        /// </summary>
        /// <remarks>
        /// Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        List<OrgsorgidprojectsprojectidbuildtargetsBuilds> StartBuilds (string orgid, string projectid, string buildtargetid, Options11 options = null);

        /// <summary>
        /// Create new build
        /// </summary>
        /// <remarks>
        /// Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>ApiResponse of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> StartBuildsWithHttpInfo (string orgid, string projectid, string buildtargetid, Options11 options = null);
        /// <summary>
        /// Update build information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        OrgsorgidprojectsprojectidbuildtargetsBuilds UpdateBuild (string orgid, string projectid, string buildtargetid, string number, Options12 options);

        /// <summary>
        /// Update build information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>ApiResponse of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds> UpdateBuildWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, Options12 options);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete artifacts for a batch of builds
        /// </summary>
        /// <remarks>
        /// Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> BatchDeleteBuildArtifactsAsync (string orgid, string projectid, Options10 options);

        /// <summary>
        /// Delete artifacts for a batch of builds
        /// </summary>
        /// <remarks>
        /// Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> BatchDeleteBuildArtifactsAsyncWithHttpInfo (string orgid, string projectid, Options10 options);
        /// <summary>
        /// Cancel all builds
        /// </summary>
        /// <remarks>
        /// Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CancelAllBuildsAsync (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Cancel all builds
        /// </summary>
        /// <remarks>
        /// Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CancelAllBuildsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Cancel build
        /// </summary>
        /// <remarks>
        /// Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CancelBuildAsync (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Cancel build
        /// </summary>
        /// <remarks>
        /// Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CancelBuildAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Cancel builds for org
        /// </summary>
        /// <remarks>
        /// Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CancelBuildsForOrgAsync (string orgid);

        /// <summary>
        /// Cancel builds for org
        /// </summary>
        /// <remarks>
        /// Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CancelBuildsForOrgAsyncWithHttpInfo (string orgid);
        /// <summary>
        /// Create a new link to share a project
        /// </summary>
        /// <remarks>
        /// Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> CreateShareAsync (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Create a new link to share a project
        /// </summary>
        /// <remarks>
        /// Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> CreateShareAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteAllBuildArtifactsAsync (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteAllBuildArtifactsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Delete all artifacts associated with a specific build
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteBuildArtifactsAsync (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Delete all artifacts associated with a specific build
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteBuildArtifactsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of historical settings changes for this build target.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20011>> GetAuditLogAsync (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null);

        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of historical settings changes for this build target.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> GetAuditLogAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null);
        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of settings changes between the last and current build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20011>> GetAuditLog_0Async (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null);

        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// Retrieve a list of settings changes between the last and current build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> GetAuditLog_0AsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null);
        /// <summary>
        /// Build Status
        /// </summary>
        /// <remarks>
        /// Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>Task of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        System.Threading.Tasks.Task<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuildAsync (string orgid, string projectid, string buildtargetid, string number, string include = null);

        /// <summary>
        /// Build Status
        /// </summary>
        /// <remarks>
        /// Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>Task of ApiResponse (OrgsorgidprojectsprojectidbuildtargetsBuilds)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, string include = null);
        /// <summary>
        /// Get build log
        /// </summary>
        /// <remarks>
        /// Retrieve the plain text log for a specifc build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetBuildLogAsync (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null);

        /// <summary>
        /// Get build log
        /// </summary>
        /// <remarks>
        /// Retrieve the plain text log for a specifc build.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBuildLogAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null);
        /// <summary>
        /// List all builds
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        System.Threading.Tasks.Task<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildsAsync (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);

        /// <summary>
        /// List all builds
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>> GetBuildsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);
        /// <summary>
        /// List all builds for org
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        System.Threading.Tasks.Task<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildsForOrgAsync (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);

        /// <summary>
        /// List all builds for org
        /// </summary>
        /// <remarks>
        /// List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>> GetBuildsForOrgAsyncWithHttpInfo (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null);
        /// <summary>
        /// Get the share link
        /// </summary>
        /// <remarks>
        /// Gets a share link if it exists
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetShareAsync (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Get the share link
        /// </summary>
        /// <remarks>
        /// Gets a share link if it exists
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetShareAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Revoke a shared link
        /// </summary>
        /// <remarks>
        /// Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RevokeShareAsync (string orgid, string projectid, string buildtargetid, string number);

        /// <summary>
        /// Revoke a shared link
        /// </summary>
        /// <remarks>
        /// Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RevokeShareAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number);
        /// <summary>
        /// Create new build
        /// </summary>
        /// <remarks>
        /// Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>Task of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        System.Threading.Tasks.Task<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> StartBuildsAsync (string orgid, string projectid, string buildtargetid, Options11 options = null);

        /// <summary>
        /// Create new build
        /// </summary>
        /// <remarks>
        /// Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>> StartBuildsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, Options11 options = null);
        /// <summary>
        /// Update build information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>Task of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        System.Threading.Tasks.Task<OrgsorgidprojectsprojectidbuildtargetsBuilds> UpdateBuildAsync (string orgid, string projectid, string buildtargetid, string number, Options12 options);

        /// <summary>
        /// Update build information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>Task of ApiResponse (OrgsorgidprojectsprojectidbuildtargetsBuilds)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>> UpdateBuildAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, Options12 options);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildsApi : IBuildsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete artifacts for a batch of builds Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>string</returns>
        public string BatchDeleteBuildArtifacts (string orgid, string projectid, Options10 options)
        {
             ApiResponse<string> localVarResponse = BatchDeleteBuildArtifactsWithHttpInfo(orgid, projectid, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete artifacts for a batch of builds Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > BatchDeleteBuildArtifactsWithHttpInfo (string orgid, string projectid, Options10 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->BatchDeleteBuildArtifacts");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->BatchDeleteBuildArtifacts");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildsApi->BatchDeleteBuildArtifacts");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/artifacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchDeleteBuildArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete artifacts for a batch of builds Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> BatchDeleteBuildArtifactsAsync (string orgid, string projectid, Options10 options)
        {
             ApiResponse<string> localVarResponse = await BatchDeleteBuildArtifactsAsyncWithHttpInfo(orgid, projectid, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete artifacts for a batch of builds Delete all artifacts associated with the builds identified by the provided build target ids and build numbers. Builds marked as do not delete or that are currently building will be ignored. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options to specify what builds to delete</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> BatchDeleteBuildArtifactsAsyncWithHttpInfo (string orgid, string projectid, Options10 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->BatchDeleteBuildArtifacts");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->BatchDeleteBuildArtifacts");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildsApi->BatchDeleteBuildArtifacts");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/artifacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchDeleteBuildArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel all builds Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>string</returns>
        public string CancelAllBuilds (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<string> localVarResponse = CancelAllBuildsWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all builds Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CancelAllBuildsWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CancelAllBuilds");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->CancelAllBuilds");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->CancelAllBuilds");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAllBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel all builds Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CancelAllBuildsAsync (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<string> localVarResponse = await CancelAllBuildsAsyncWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all builds Cancel all builds in progress for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid). Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CancelAllBuildsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CancelAllBuilds");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->CancelAllBuilds");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->CancelAllBuilds");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAllBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel build Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>string</returns>
        public string CancelBuild (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<string> localVarResponse = CancelBuildWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel build Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CancelBuildWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CancelBuild");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->CancelBuild");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->CancelBuild");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->CancelBuild");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel build Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CancelBuildAsync (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<string> localVarResponse = await CancelBuildAsyncWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel build Cancel a build in progress. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CancelBuildAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CancelBuild");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->CancelBuild");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->CancelBuild");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->CancelBuild");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel builds for org Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>string</returns>
        public string CancelBuildsForOrg (string orgid)
        {
             ApiResponse<string> localVarResponse = CancelBuildsForOrgWithHttpInfo(orgid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel builds for org Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CancelBuildsForOrgWithHttpInfo (string orgid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CancelBuildsForOrg");

            var localVarPath = "/orgs/{orgid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBuildsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel builds for org Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CancelBuildsForOrgAsync (string orgid)
        {
             ApiResponse<string> localVarResponse = await CancelBuildsForOrgAsyncWithHttpInfo(orgid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel builds for org Cancel all in progress builds for an organization. Canceling an already finished build will do nothing and respond successfully. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CancelBuildsForOrgAsyncWithHttpInfo (string orgid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CancelBuildsForOrg");

            var localVarPath = "/orgs/{orgid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBuildsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a new link to share a project Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 CreateShare (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<InlineResponse20015> localVarResponse = CreateShareWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new link to share a project Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > CreateShareWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CreateShare");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->CreateShare");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->CreateShare");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->CreateShare");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Create a new link to share a project Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> CreateShareAsync (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await CreateShareAsyncWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new link to share a project Create a new short link to share a project. If this is called when a share already exists, that share will be revoked and a new one created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> CreateShareAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->CreateShare");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->CreateShare");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->CreateShare");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->CreateShare");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>string</returns>
        public string DeleteAllBuildArtifacts (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<string> localVarResponse = DeleteAllBuildArtifactsWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteAllBuildArtifactsWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->DeleteAllBuildArtifacts");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->DeleteAllBuildArtifacts");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->DeleteAllBuildArtifacts");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllBuildArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteAllBuildArtifactsAsync (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<string> localVarResponse = await DeleteAllBuildArtifactsAsyncWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all artifacts associated with all non-favorited builds for a specified buildtargetid (_all is allowed). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteAllBuildArtifactsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->DeleteAllBuildArtifacts");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->DeleteAllBuildArtifacts");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->DeleteAllBuildArtifacts");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllBuildArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete all artifacts associated with a specific build 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>string</returns>
        public string DeleteBuildArtifacts (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<string> localVarResponse = DeleteBuildArtifactsWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all artifacts associated with a specific build 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteBuildArtifactsWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->DeleteBuildArtifacts");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->DeleteBuildArtifacts");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->DeleteBuildArtifacts");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->DeleteBuildArtifacts");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete all artifacts associated with a specific build 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteBuildArtifactsAsync (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<string> localVarResponse = await DeleteBuildArtifactsAsyncWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all artifacts associated with a specific build 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteBuildArtifactsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->DeleteBuildArtifacts");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->DeleteBuildArtifacts");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->DeleteBuildArtifacts");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->DeleteBuildArtifacts");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get audit log Retrieve a list of historical settings changes for this build target.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        public List<InlineResponse20011> GetAuditLog (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = GetAuditLogWithHttpInfo(orgid, projectid, buildtargetid, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log Retrieve a list of historical settings changes for this build target.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        public ApiResponse< List<InlineResponse20011> > GetAuditLogWithHttpInfo (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetAuditLog");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetAuditLog");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetAuditLog");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20011>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        /// Get audit log Retrieve a list of historical settings changes for this build target.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20011>> GetAuditLogAsync (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = await GetAuditLogAsyncWithHttpInfo(orgid, projectid, buildtargetid, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit log Retrieve a list of historical settings changes for this build target.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> GetAuditLogAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, decimal? perPage = null, decimal? page = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetAuditLog");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetAuditLog");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetAuditLog");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20011>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        /// Get audit log Retrieve a list of settings changes between the last and current build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        public List<InlineResponse20011> GetAuditLog_0 (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = GetAuditLog_0WithHttpInfo(orgid, projectid, buildtargetid, number, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log Retrieve a list of settings changes between the last and current build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        public ApiResponse< List<InlineResponse20011> > GetAuditLog_0WithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetAuditLog_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetAuditLog_0");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetAuditLog_0");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetAuditLog_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLog_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20011>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        /// Get audit log Retrieve a list of settings changes between the last and current build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20011>> GetAuditLog_0Async (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = await GetAuditLog_0AsyncWithHttpInfo(orgid, projectid, buildtargetid, number, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit log Retrieve a list of settings changes between the last and current build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> GetAuditLog_0AsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? perPage = null, decimal? page = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetAuditLog_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetAuditLog_0");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetAuditLog_0");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetAuditLog_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLog_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20011>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        /// Build Status Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        public OrgsorgidprojectsprojectidbuildtargetsBuilds GetBuild (string orgid, string projectid, string buildtargetid, string number, string include = null)
        {
             ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds> localVarResponse = GetBuildWithHttpInfo(orgid, projectid, buildtargetid, number, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Build Status Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>ApiResponse of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        public ApiResponse< OrgsorgidprojectsprojectidbuildtargetsBuilds > GetBuildWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, string include = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuild");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetBuild");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetBuild");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetBuild");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrgsorgidprojectsprojectidbuildtargetsBuilds) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgsorgidprojectsprojectidbuildtargetsBuilds)));
        }

        /// <summary>
        /// Build Status Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>Task of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        public async System.Threading.Tasks.Task<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuildAsync (string orgid, string projectid, string buildtargetid, string number, string include = null)
        {
             ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds> localVarResponse = await GetBuildAsyncWithHttpInfo(orgid, projectid, buildtargetid, number, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Build Status Retrieve information for a specific build. A Build resource contains information related to a build attempt for a build target, including the build number, changeset, build times, and other pertinent data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <returns>Task of ApiResponse (OrgsorgidprojectsprojectidbuildtargetsBuilds)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, string include = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuild");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetBuild");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetBuild");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetBuild");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrgsorgidprojectsprojectidbuildtargetsBuilds) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgsorgidprojectsprojectidbuildtargetsBuilds)));
        }

        /// <summary>
        /// Get build log Retrieve the plain text log for a specifc build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns></returns>
        public void GetBuildLog (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null)
        {
             GetBuildLogWithHttpInfo(orgid, projectid, buildtargetid, number, offsetlines, linenumbers, lastLineNumber, compact, withHtml);
        }

        /// <summary>
        /// Get build log Retrieve the plain text log for a specifc build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBuildLogWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuildLog");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetBuildLog");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetBuildLog");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetBuildLog");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (offsetlines != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offsetlines", offsetlines)); // query parameter
            if (linenumbers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "linenumbers", linenumbers)); // query parameter
            if (lastLineNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastLineNumber", lastLineNumber)); // query parameter
            if (compact != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "compact", compact)); // query parameter
            if (withHtml != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withHtml", withHtml)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get build log Retrieve the plain text log for a specifc build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBuildLogAsync (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null)
        {
             await GetBuildLogAsyncWithHttpInfo(orgid, projectid, buildtargetid, number, offsetlines, linenumbers, lastLineNumber, compact, withHtml);

        }

        /// <summary>
        /// Get build log Retrieve the plain text log for a specifc build.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="offsetlines">Stream log from the given line number (optional, default to 1)</param>
        /// <param name="linenumbers">Include log line numbers in the text output (optional, default to false)</param>
        /// <param name="lastLineNumber">The last line number seen, numbering will continue from here (optional, default to 0)</param>
        /// <param name="compact">Return the compact log, showing only errors and warnings (optional, default to false)</param>
        /// <param name="withHtml">Surround important lines (errors, warnings) with SPAN and CSS markup  (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBuildLogAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, decimal? offsetlines = null, bool? linenumbers = null, decimal? lastLineNumber = null, bool? compact = null, bool? withHtml = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuildLog");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetBuildLog");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetBuildLog");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetBuildLog");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (offsetlines != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offsetlines", offsetlines)); // query parameter
            if (linenumbers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "linenumbers", linenumbers)); // query parameter
            if (lastLineNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastLineNumber", lastLineNumber)); // query parameter
            if (compact != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "compact", compact)); // query parameter
            if (withHtml != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withHtml", withHtml)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all builds List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public List<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuilds (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
             ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> localVarResponse = GetBuildsWithHttpInfo(orgid, projectid, buildtargetid, include, perPage, page, buildStatus, platform, showDeleted, onlyFavorites);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all builds List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public ApiResponse< List<OrgsorgidprojectsprojectidbuildtargetsBuilds> > GetBuildsWithHttpInfo (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuilds");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetBuilds");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetBuilds");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (buildStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buildStatus", buildStatus)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter
            if (onlyFavorites != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyFavorites", onlyFavorites)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrgsorgidprojectsprojectidbuildtargetsBuilds>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgsorgidprojectsprojectidbuildtargetsBuilds>)));
        }

        /// <summary>
        /// List all builds List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildsAsync (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
             ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> localVarResponse = await GetBuildsAsyncWithHttpInfo(orgid, projectid, buildtargetid, include, perPage, page, buildStatus, platform, showDeleted, onlyFavorites);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all builds List all running and finished builds, sorted by build number (optionally paginating the results). Use &#39;_all&#39; as the buildtargetid to get all configured build targets. The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>> GetBuildsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuilds");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetBuilds");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetBuilds");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (buildStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buildStatus", buildStatus)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter
            if (onlyFavorites != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyFavorites", onlyFavorites)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrgsorgidprojectsprojectidbuildtargetsBuilds>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgsorgidprojectsprojectidbuildtargetsBuilds>)));
        }

        /// <summary>
        /// List all builds for org List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public List<OrgsorgidprojectsprojectidbuildtargetsBuilds> GetBuildsForOrg (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
             ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> localVarResponse = GetBuildsForOrgWithHttpInfo(orgid, include, perPage, page, buildStatus, platform, showDeleted, onlyFavorites);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all builds for org List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public ApiResponse< List<OrgsorgidprojectsprojectidbuildtargetsBuilds> > GetBuildsForOrgWithHttpInfo (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuildsForOrg");

            var localVarPath = "/orgs/{orgid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (buildStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buildStatus", buildStatus)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter
            if (onlyFavorites != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyFavorites", onlyFavorites)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrgsorgidprojectsprojectidbuildtargetsBuilds>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgsorgidprojectsprojectidbuildtargetsBuilds>)));
        }

        /// <summary>
        /// List all builds for org List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> GetBuildsForOrgAsync (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
             ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> localVarResponse = await GetBuildsForOrgAsyncWithHttpInfo(orgid, include, perPage, page, buildStatus, platform, showDeleted, onlyFavorites);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all builds for org List all running and finished builds, sorted by build number (optionally paginating the results). The response includes a Content-Range header that identifies the range of results returned and the total number of results matching the given query parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="perPage">Number of audit log records to retrieve (optional, default to 25)</param>
        /// <param name="page">Skip to page number, based on per_page value (optional, default to 1)</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="platform">Query for only builds of a specific platform (optional)</param>
        /// <param name="showDeleted">Query for builds that have been deleted (optional, default to false)</param>
        /// <param name="onlyFavorites">Query for builds that have been favorited (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>> GetBuildsForOrgAsyncWithHttpInfo (string orgid, string include = null, decimal? perPage = null, decimal? page = null, string buildStatus = null, string platform = null, bool? showDeleted = null, bool? onlyFavorites = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetBuildsForOrg");

            var localVarPath = "/orgs/{orgid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (buildStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buildStatus", buildStatus)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter
            if (onlyFavorites != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyFavorites", onlyFavorites)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrgsorgidprojectsprojectidbuildtargetsBuilds>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgsorgidprojectsprojectidbuildtargetsBuilds>)));
        }

        /// <summary>
        /// Get the share link Gets a share link if it exists
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetShare (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GetShareWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the share link Gets a share link if it exists
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GetShareWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetShare");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetShare");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetShare");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetShare");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Get the share link Gets a share link if it exists
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GetShareAsync (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GetShareAsyncWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the share link Gets a share link if it exists
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetShareAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->GetShare");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->GetShare");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->GetShare");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->GetShare");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Revoke a shared link Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>string</returns>
        public string RevokeShare (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<string> localVarResponse = RevokeShareWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke a shared link Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > RevokeShareWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->RevokeShare");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->RevokeShare");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->RevokeShare");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->RevokeShare");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Revoke a shared link Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RevokeShareAsync (string orgid, string projectid, string buildtargetid, string number)
        {
             ApiResponse<string> localVarResponse = await RevokeShareAsyncWithHttpInfo(orgid, projectid, buildtargetid, number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke a shared link Revoke a shared link, both {buildtargetid} and {number} may use _all to revoke all share links for a given buildtarget or entire project.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> RevokeShareAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->RevokeShare");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->RevokeShare");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->RevokeShare");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->RevokeShare");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create new build Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public List<OrgsorgidprojectsprojectidbuildtargetsBuilds> StartBuilds (string orgid, string projectid, string buildtargetid, Options11 options = null)
        {
             ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> localVarResponse = StartBuildsWithHttpInfo(orgid, projectid, buildtargetid, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new build Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>ApiResponse of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public ApiResponse< List<OrgsorgidprojectsprojectidbuildtargetsBuilds> > StartBuildsWithHttpInfo (string orgid, string projectid, string buildtargetid, Options11 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->StartBuilds");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->StartBuilds");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->StartBuilds");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrgsorgidprojectsprojectidbuildtargetsBuilds>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgsorgidprojectsprojectidbuildtargetsBuilds>)));
        }

        /// <summary>
        /// Create new build Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>Task of List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> StartBuildsAsync (string orgid, string projectid, string buildtargetid, Options11 options = null)
        {
             ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>> localVarResponse = await StartBuildsAsyncWithHttpInfo(orgid, projectid, buildtargetid, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new build Start the build process for this build target (or all targets, if &#39;_all&#39; is specified as the buildtargetid), if there is not one currently in process.  If a build is currently in process that information will be related in the &#39;error&#39; field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for starting the builds. You can specify a platform and label only when  starting a local (_local) build. A local build will return immediately and be  marked as successful.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrgsorgidprojectsprojectidbuildtargetsBuilds&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>> StartBuildsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, Options11 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->StartBuilds");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->StartBuilds");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->StartBuilds");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgsorgidprojectsprojectidbuildtargetsBuilds>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrgsorgidprojectsprojectidbuildtargetsBuilds>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgsorgidprojectsprojectidbuildtargetsBuilds>)));
        }

        /// <summary>
        /// Update build information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        public OrgsorgidprojectsprojectidbuildtargetsBuilds UpdateBuild (string orgid, string projectid, string buildtargetid, string number, Options12 options)
        {
             ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds> localVarResponse = UpdateBuildWithHttpInfo(orgid, projectid, buildtargetid, number, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update build information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>ApiResponse of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        public ApiResponse< OrgsorgidprojectsprojectidbuildtargetsBuilds > UpdateBuildWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, Options12 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildsApi->UpdateBuild");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrgsorgidprojectsprojectidbuildtargetsBuilds) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgsorgidprojectsprojectidbuildtargetsBuilds)));
        }

        /// <summary>
        /// Update build information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>Task of OrgsorgidprojectsprojectidbuildtargetsBuilds</returns>
        public async System.Threading.Tasks.Task<OrgsorgidprojectsprojectidbuildtargetsBuilds> UpdateBuildAsync (string orgid, string projectid, string buildtargetid, string number, Options12 options)
        {
             ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds> localVarResponse = await UpdateBuildAsyncWithHttpInfo(orgid, projectid, buildtargetid, number, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update build information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="number">Build number or in some cases _all</param>
        /// <param name="options">Options for build update</param>
        /// <returns>Task of ApiResponse (OrgsorgidprojectsprojectidbuildtargetsBuilds)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>> UpdateBuildAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string number, Options12 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BuildsApi->UpdateBuild");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildsApi->UpdateBuild");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/builds/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgsorgidprojectsprojectidbuildtargetsBuilds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrgsorgidprojectsprojectidbuildtargetsBuilds) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgsorgidprojectsprojectidbuildtargetsBuilds)));
        }

    }
}
