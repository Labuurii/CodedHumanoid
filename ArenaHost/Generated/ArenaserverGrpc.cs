// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arenaserver.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace ArenaServer {
  public static partial class ArenaHostServicePrivate
  {
    static readonly string __ServiceName = "ArenaServer.ArenaHostServicePrivate";

    static readonly grpc::Marshaller<global::ArenaServer.CreateArenaAttempt> __Marshaller_CreateArenaAttempt = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.CreateArenaAttempt.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ArenaServer.CreateArenaResult> __Marshaller_CreateArenaResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.CreateArenaResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ArenaServer.ShutdownAttempt> __Marshaller_ShutdownAttempt = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.ShutdownAttempt.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ArenaServer.ShutdownResult> __Marshaller_ShutdownResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.ShutdownResult.Parser.ParseFrom);

    static readonly grpc::Method<global::ArenaServer.CreateArenaAttempt, global::ArenaServer.CreateArenaResult> __Method_CreateArena = new grpc::Method<global::ArenaServer.CreateArenaAttempt, global::ArenaServer.CreateArenaResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateArena",
        __Marshaller_CreateArenaAttempt,
        __Marshaller_CreateArenaResult);

    static readonly grpc::Method<global::ArenaServer.ShutdownAttempt, global::ArenaServer.ShutdownResult> __Method_Shutdown = new grpc::Method<global::ArenaServer.ShutdownAttempt, global::ArenaServer.ShutdownResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_ShutdownAttempt,
        __Marshaller_ShutdownResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ArenaServer.ArenaserverReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ArenaHostServicePrivate</summary>
    public abstract partial class ArenaHostServicePrivateBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ArenaServer.CreateArenaResult> CreateArena(global::ArenaServer.CreateArenaAttempt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ArenaServer.ShutdownResult> Shutdown(global::ArenaServer.ShutdownAttempt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ArenaHostServicePrivate</summary>
    public partial class ArenaHostServicePrivateClient : grpc::ClientBase<ArenaHostServicePrivateClient>
    {
      /// <summary>Creates a new client for ArenaHostServicePrivate</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ArenaHostServicePrivateClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ArenaHostServicePrivate that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ArenaHostServicePrivateClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ArenaHostServicePrivateClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ArenaHostServicePrivateClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ArenaServer.CreateArenaResult CreateArena(global::ArenaServer.CreateArenaAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateArena(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ArenaServer.CreateArenaResult CreateArena(global::ArenaServer.CreateArenaAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateArena, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ArenaServer.CreateArenaResult> CreateArenaAsync(global::ArenaServer.CreateArenaAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateArenaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ArenaServer.CreateArenaResult> CreateArenaAsync(global::ArenaServer.CreateArenaAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateArena, null, options, request);
      }
      public virtual global::ArenaServer.ShutdownResult Shutdown(global::ArenaServer.ShutdownAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Shutdown(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ArenaServer.ShutdownResult Shutdown(global::ArenaServer.ShutdownAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shutdown, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ArenaServer.ShutdownResult> ShutdownAsync(global::ArenaServer.ShutdownAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ShutdownAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ArenaServer.ShutdownResult> ShutdownAsync(global::ArenaServer.ShutdownAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shutdown, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ArenaHostServicePrivateClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ArenaHostServicePrivateClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ArenaHostServicePrivateBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateArena, serviceImpl.CreateArena)
          .AddMethod(__Method_Shutdown, serviceImpl.Shutdown).Build();
    }

  }
  public static partial class ArenaServicePrivate
  {
    static readonly string __ServiceName = "ArenaServer.ArenaServicePrivate";

    static readonly grpc::Marshaller<global::ArenaServer.SubscriptionAttempt> __Marshaller_SubscriptionAttempt = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.SubscriptionAttempt.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ArenaServer.Event_Arena> __Marshaller_Event_Arena = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.Event_Arena.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ArenaServer.RemovePlayerAttempt> __Marshaller_RemovePlayerAttempt = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.RemovePlayerAttempt.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ArenaServer.RemovePlayerResult> __Marshaller_RemovePlayerResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ArenaServer.RemovePlayerResult.Parser.ParseFrom);

    static readonly grpc::Method<global::ArenaServer.SubscriptionAttempt, global::ArenaServer.Event_Arena> __Method_Subscribe = new grpc::Method<global::ArenaServer.SubscriptionAttempt, global::ArenaServer.Event_Arena>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_SubscriptionAttempt,
        __Marshaller_Event_Arena);

    static readonly grpc::Method<global::ArenaServer.RemovePlayerAttempt, global::ArenaServer.RemovePlayerResult> __Method_RemovePlayer = new grpc::Method<global::ArenaServer.RemovePlayerAttempt, global::ArenaServer.RemovePlayerResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePlayer",
        __Marshaller_RemovePlayerAttempt,
        __Marshaller_RemovePlayerResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ArenaServer.ArenaserverReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ArenaServicePrivate</summary>
    public abstract partial class ArenaServicePrivateBase
    {
      public virtual global::System.Threading.Tasks.Task Subscribe(global::ArenaServer.SubscriptionAttempt request, grpc::IServerStreamWriter<global::ArenaServer.Event_Arena> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ArenaServer.RemovePlayerResult> RemovePlayer(global::ArenaServer.RemovePlayerAttempt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ArenaServicePrivate</summary>
    public partial class ArenaServicePrivateClient : grpc::ClientBase<ArenaServicePrivateClient>
    {
      /// <summary>Creates a new client for ArenaServicePrivate</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ArenaServicePrivateClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ArenaServicePrivate that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ArenaServicePrivateClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ArenaServicePrivateClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ArenaServicePrivateClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::ArenaServer.Event_Arena> Subscribe(global::ArenaServer.SubscriptionAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::ArenaServer.Event_Arena> Subscribe(global::ArenaServer.SubscriptionAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      public virtual global::ArenaServer.RemovePlayerResult RemovePlayer(global::ArenaServer.RemovePlayerAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemovePlayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ArenaServer.RemovePlayerResult RemovePlayer(global::ArenaServer.RemovePlayerAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePlayer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ArenaServer.RemovePlayerResult> RemovePlayerAsync(global::ArenaServer.RemovePlayerAttempt request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemovePlayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ArenaServer.RemovePlayerResult> RemovePlayerAsync(global::ArenaServer.RemovePlayerAttempt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePlayer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ArenaServicePrivateClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ArenaServicePrivateClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ArenaServicePrivateBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_RemovePlayer, serviceImpl.RemovePlayer).Build();
    }

  }
}
#endregion
