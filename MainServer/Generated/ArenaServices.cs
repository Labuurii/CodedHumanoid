// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: arena_services.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ArenaServices {

  /// <summary>Holder for reflection information generated from arena_services.proto</summary>
  public static partial class ArenaServicesReflection {

    #region Descriptor
    /// <summary>File descriptor for arena_services.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArenaServicesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRhcmVuYV9zZXJ2aWNlcy5wcm90bxIOYXJlbmFfc2VydmljZXMiKgoHVmVj",
            "dG9yMxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiI4CgpRdWF0",
            "ZXJuaW9uEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEgkKAXcY",
            "BCABKAIiwgEKCVRyYW5zZm9ybRIpCghwb3NpdGlvbhgBIAEoCzIXLmFyZW5h",
            "X3NlcnZpY2VzLlZlY3RvcjMSKQoIdmVsb2NpdHkYAiABKAsyFy5hcmVuYV9z",
            "ZXJ2aWNlcy5WZWN0b3IzEiwKCHJvdGF0aW9uGAMgASgLMhouYXJlbmFfc2Vy",
            "dmljZXMuUXVhdGVybmlvbhIxChBhbmd1bGFyX3ZlbG9jaXR5GAQgASgLMhcu",
            "YXJlbmFfc2VydmljZXMuVmVjdG9yMyIoCgZQbGF5ZXISDAoEbmFtZRgBIAEo",
            "CRIQCghsYW5ndWFnZRgCIAEoCSIVChNTdWJzY3JpcHRpb25BdHRlbXB0IrEB",
            "CgdFdmVudDNEElIKGG9iamVjdF90cmFuc2Zvcm1fY2hhbmdlZBgBIAEoCzIu",
            "LmFyZW5hX3NlcnZpY2VzLkV2ZW50M0RfT2JqZWN0VHJhbnNmb3JtQ2hhbmdl",
            "ZEgAEkkKE29iamVjdF9ub3RpZmljYXRpb24YAiABKAsyKi5hcmVuYV9zZXJ2",
            "aWNlcy5FdmVudDNEX09iamVjdE5vdGlmaWNhdGlvbkgAQgcKBWV2ZW50Il4K",
            "HkV2ZW50M0RfT2JqZWN0VHJhbnNmb3JtQ2hhbmdlZBIKCgJpZBgBIAEoBRIw",
            "Cg1uZXdfdHJhbnNmb3JtGAIgASgLMhkuYXJlbmFfc2VydmljZXMuVHJhbnNm",
            "b3JtIncKGkV2ZW50M0RfT2JqZWN0Tm90aWZpY2F0aW9uEgoKAmlkGAEgASgF",
            "EhAKCHNwYXduX2lkGAIgASgFEiwKCXRyYW5zZm9ybRgDIAEoCzIZLmFyZW5h",
            "X3NlcnZpY2VzLlRyYW5zZm9ybRINCgVzcGF3bhgEIAEoCCIdChtFdmVudE1h",
            "dGNoTWFrZXJfUXVldWVQb3BwZWQiXQohRXZlbnRNYXRjaE1ha2VyX1F1ZXVl",
            "UG9wQ2FuY2VsbGVkEjgKBnJlYXNvbhgBIAEoDjIoLmFyZW5hX3NlcnZpY2Vz",
            "LlF1ZXVlUG9wQ2FuY2VsbGVkX1JlYXNvbiJrCg1RdWV1ZVN0YXRlTXNnEhUK",
            "DWF1dGhlbnRpY2F0ZWQYASABKAgSEAoIaXNfZHVtbXkYAiABKAgSMQoNY3Vy",
            "cmVudF9zdGF0ZRgDIAEoDjIaLmFyZW5hX3NlcnZpY2VzLlF1ZXVlU3RhdGUi",
            "kAEKDFF1ZXVlQXR0ZW1wdBItCgptYXRjaF9tb2RlGAEgASgOMhkuYXJlbmFf",
            "c2VydmljZXMuTWF0Y2hNb2RlEiQKBWFyZW5hGAIgASgOMhUuYXJlbmFfc2Vy",
            "dmljZXMuQXJlbmESKwoJdGVhbV9zaXplGAMgASgOMhguYXJlbmFfc2Vydmlj",
            "ZXMuVGVhbVNpemUiJgoSQW5zd2VyTWF0Y2hBdHRlbXB0EhAKCGFjY2VwdGVk",
            "GAEgASgIIhMKEUxlYXZlUXVldWVBdHRlbXB0Ii4KHUJhc2VTZXJ2ZXJTdWJz",
            "Y3JpcHRpb25BdHRlbXB0Eg0KBXRva2VuGAEgASgJImkKCUV2ZW50QmFzZRJT",
            "ChdzdWJzY3JpcHRpb25fc3VjY2Vzc2Z1bBgBIAEoCzIwLmFyZW5hX3NlcnZp",
            "Y2VzLkV2ZW50QmFzZV9TdWJzY3JpcHRpb25TdWNjZXNzZnVsSABCBwoFZXZl",
            "bnQiOQogRXZlbnRCYXNlX1N1YnNjcmlwdGlvblN1Y2Nlc3NmdWwSFQoNc2Vz",
            "c2lvbl90b2tlbhgBIAEoCSKZAQoKRXZlbnRBcmVuYRI8CgtwbGF5ZXJfZGVj",
            "bBgBIAEoCzIlLmFyZW5hX3NlcnZpY2VzLkV2ZW50QXJlbmFfUGxheWVyRGVj",
            "bEgAEkQKC3BsYXllcl9kY2VkGAIgASgLMi0uYXJlbmFfc2VydmljZXMuRXZl",
            "bnRBcmVuYV9QbGF5ZXJEaXNjb25uZWN0ZWRIAEIHCgVldmVudCKCAQoVRXZl",
            "bnRBcmVuYV9QbGF5ZXJEZWNsEgwKBGxlZnQYASABKAgSLAoMbGVmdF9wbGF5",
            "ZXJzGAIgAygLMhYuYXJlbmFfc2VydmljZXMuUGxheWVyEi0KDXJpZ2h0X3Bs",
            "YXllcnMYAyADKAsyFi5hcmVuYV9zZXJ2aWNlcy5QbGF5ZXIiLQodRXZlbnRB",
            "cmVuYV9QbGF5ZXJEaXNjb25uZWN0ZWQSDAoEbmFtZRgBIAEoCSosChhRdWV1",
            "ZVBvcENhbmNlbGxlZF9SZWFzb24SEAoMc29tZW9uZV9sZWZ0EAAqeAoKUXVl",
            "dWVTdGF0ZRIOCgpub3RfcXVldWVkEAASCgoGcXVldWVkEAESEAoMcXVldWVf",
            "cG9wcGVkEAISGgoWYXdhaXRpbmdfb3RoZXJfcGxheWVycxADEhIKDmFyZW5h",
            "X2pvaW5hYmxlEAUSDAoIaW5fYXJlbmEQBCobCgVBcmVuYRIICgRub25lEAAS",
            "CAoEYWdhchABKicKCFRlYW1TaXplEgcKA29uZRAAEgcKA3R3bxABEgkKBXRo",
            "cmVlEAIqJQoJTWF0Y2hNb2RlEgwKCFNraXJtaXNoEAASCgoGUmFua2VkEAEy",
            "aAoLQmFzZVNlcnZpY2USWQoJU3Vic2NyaWJlEi0uYXJlbmFfc2VydmljZXMu",
            "QmFzZVNlcnZlclN1YnNjcmlwdGlvbkF0dGVtcHQaGS5hcmVuYV9zZXJ2aWNl",
            "cy5FdmVudEJhc2UiADABMtYCChFNYXRjaE1ha2VyU2VydmljZRJGCgVRdWV1",
            "ZRIcLmFyZW5hX3NlcnZpY2VzLlF1ZXVlQXR0ZW1wdBodLmFyZW5hX3NlcnZp",
            "Y2VzLlF1ZXVlU3RhdGVNc2ciABJSCgtBbnN3ZXJNYXRjaBIiLmFyZW5hX3Nl",
            "cnZpY2VzLkFuc3dlck1hdGNoQXR0ZW1wdBodLmFyZW5hX3NlcnZpY2VzLlF1",
            "ZXVlU3RhdGVNc2ciABJQCgpMZWF2ZVF1ZXVlEiEuYXJlbmFfc2VydmljZXMu",
            "TGVhdmVRdWV1ZUF0dGVtcHQaHS5hcmVuYV9zZXJ2aWNlcy5RdWV1ZVN0YXRl",
            "TXNnIgASUwoJU3Vic2NyaWJlEiMuYXJlbmFfc2VydmljZXMuU3Vic2NyaXB0",
            "aW9uQXR0ZW1wdBodLmFyZW5hX3NlcnZpY2VzLlF1ZXVlU3RhdGVNc2ciADAB",
            "MmQKEEFyZW5hQmFzZVNlcnZpY2USUAoJU3Vic2NyaWJlEiMuYXJlbmFfc2Vy",
            "dmljZXMuU3Vic2NyaXB0aW9uQXR0ZW1wdBoaLmFyZW5hX3NlcnZpY2VzLkV2",
            "ZW50QXJlbmEiADABMl8KDkFyZW5hM0RTZXJ2aWNlEk0KCVN1YnNjcmliZRIj",
            "LmFyZW5hX3NlcnZpY2VzLlN1YnNjcmlwdGlvbkF0dGVtcHQaFy5hcmVuYV9z",
            "ZXJ2aWNlcy5FdmVudDNEIgAwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ArenaServices.QueuePopCancelled_Reason), typeof(global::ArenaServices.QueueState), typeof(global::ArenaServices.Arena), typeof(global::ArenaServices.TeamSize), typeof(global::ArenaServices.MatchMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Vector3), global::ArenaServices.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Quaternion), global::ArenaServices.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Transform), global::ArenaServices.Transform.Parser, new[]{ "Position", "Velocity", "Rotation", "AngularVelocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Player), global::ArenaServices.Player.Parser, new[]{ "Name", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.SubscriptionAttempt), global::ArenaServices.SubscriptionAttempt.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Event3D), global::ArenaServices.Event3D.Parser, new[]{ "ObjectTransformChanged", "ObjectNotification" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Event3D_ObjectTransformChanged), global::ArenaServices.Event3D_ObjectTransformChanged.Parser, new[]{ "Id", "NewTransform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.Event3D_ObjectNotification), global::ArenaServices.Event3D_ObjectNotification.Parser, new[]{ "Id", "SpawnId", "Transform", "Spawn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventMatchMaker_QueuePopped), global::ArenaServices.EventMatchMaker_QueuePopped.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventMatchMaker_QueuePopCancelled), global::ArenaServices.EventMatchMaker_QueuePopCancelled.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.QueueStateMsg), global::ArenaServices.QueueStateMsg.Parser, new[]{ "Authenticated", "IsDummy", "CurrentState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.QueueAttempt), global::ArenaServices.QueueAttempt.Parser, new[]{ "MatchMode", "Arena", "TeamSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.AnswerMatchAttempt), global::ArenaServices.AnswerMatchAttempt.Parser, new[]{ "Accepted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.LeaveQueueAttempt), global::ArenaServices.LeaveQueueAttempt.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.BaseServerSubscriptionAttempt), global::ArenaServices.BaseServerSubscriptionAttempt.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventBase), global::ArenaServices.EventBase.Parser, new[]{ "SubscriptionSuccessful" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventBase_SubscriptionSuccessful), global::ArenaServices.EventBase_SubscriptionSuccessful.Parser, new[]{ "SessionToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventArena), global::ArenaServices.EventArena.Parser, new[]{ "PlayerDecl", "PlayerDced" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventArena_PlayerDecl), global::ArenaServices.EventArena_PlayerDecl.Parser, new[]{ "Left", "LeftPlayers", "RightPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArenaServices.EventArena_PlayerDisconnected), global::ArenaServices.EventArena_PlayerDisconnected.Parser, new[]{ "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum QueuePopCancelled_Reason {
    [pbr::OriginalName("someone_left")] SomeoneLeft = 0,
  }

  public enum QueueState {
    [pbr::OriginalName("not_queued")] NotQueued = 0,
    [pbr::OriginalName("queued")] Queued = 1,
    [pbr::OriginalName("queue_popped")] QueuePopped = 2,
    [pbr::OriginalName("awaiting_other_players")] AwaitingOtherPlayers = 3,
    [pbr::OriginalName("arena_joinable")] ArenaJoinable = 5,
    [pbr::OriginalName("in_arena")] InArena = 4,
  }

  public enum Arena {
    [pbr::OriginalName("none")] None = 0,
    [pbr::OriginalName("agar")] Agar = 1,
  }

  public enum TeamSize {
    [pbr::OriginalName("one")] One = 0,
    [pbr::OriginalName("two")] Two = 1,
    [pbr::OriginalName("three")] Three = 2,
  }

  public enum MatchMode {
    [pbr::OriginalName("Skirmish")] Skirmish = 0,
    [pbr::OriginalName("Ranked")] Ranked = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::ArenaServices.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::ArenaServices.Vector3 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Vector3 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::ArenaServices.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 4;
    private global::ArenaServices.Vector3 angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Vector3 AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AngularVelocity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::ArenaServices.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::ArenaServices.Vector3();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::ArenaServices.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::ArenaServices.Vector3();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::ArenaServices.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              velocity_ = new global::ArenaServices.Vector3();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::ArenaServices.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 34: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::ArenaServices.Vector3();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      name_ = other.name_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionAttempt : pb::IMessage<SubscriptionAttempt> {
    private static readonly pb::MessageParser<SubscriptionAttempt> _parser = new pb::MessageParser<SubscriptionAttempt>(() => new SubscriptionAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionAttempt(SubscriptionAttempt other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionAttempt Clone() {
      return new SubscriptionAttempt(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionAttempt other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Event3D : pb::IMessage<Event3D> {
    private static readonly pb::MessageParser<Event3D> _parser = new pb::MessageParser<Event3D>(() => new Event3D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D(Event3D other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.ObjectTransformChanged:
          ObjectTransformChanged = other.ObjectTransformChanged.Clone();
          break;
        case EventOneofCase.ObjectNotification:
          ObjectNotification = other.ObjectNotification.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D Clone() {
      return new Event3D(this);
    }

    /// <summary>Field number for the "object_transform_changed" field.</summary>
    public const int ObjectTransformChangedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Event3D_ObjectTransformChanged ObjectTransformChanged {
      get { return eventCase_ == EventOneofCase.ObjectTransformChanged ? (global::ArenaServices.Event3D_ObjectTransformChanged) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ObjectTransformChanged;
      }
    }

    /// <summary>Field number for the "object_notification" field.</summary>
    public const int ObjectNotificationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Event3D_ObjectNotification ObjectNotification {
      get { return eventCase_ == EventOneofCase.ObjectNotification ? (global::ArenaServices.Event3D_ObjectNotification) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ObjectNotification;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      ObjectTransformChanged = 1,
      ObjectNotification = 2,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectTransformChanged, other.ObjectTransformChanged)) return false;
      if (!object.Equals(ObjectNotification, other.ObjectNotification)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.ObjectTransformChanged) hash ^= ObjectTransformChanged.GetHashCode();
      if (eventCase_ == EventOneofCase.ObjectNotification) hash ^= ObjectNotification.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.ObjectTransformChanged) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectTransformChanged);
      }
      if (eventCase_ == EventOneofCase.ObjectNotification) {
        output.WriteRawTag(18);
        output.WriteMessage(ObjectNotification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.ObjectTransformChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectTransformChanged);
      }
      if (eventCase_ == EventOneofCase.ObjectNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectNotification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event3D other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.ObjectTransformChanged:
          if (ObjectTransformChanged == null) {
            ObjectTransformChanged = new global::ArenaServices.Event3D_ObjectTransformChanged();
          }
          ObjectTransformChanged.MergeFrom(other.ObjectTransformChanged);
          break;
        case EventOneofCase.ObjectNotification:
          if (ObjectNotification == null) {
            ObjectNotification = new global::ArenaServices.Event3D_ObjectNotification();
          }
          ObjectNotification.MergeFrom(other.ObjectNotification);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ArenaServices.Event3D_ObjectTransformChanged subBuilder = new global::ArenaServices.Event3D_ObjectTransformChanged();
            if (eventCase_ == EventOneofCase.ObjectTransformChanged) {
              subBuilder.MergeFrom(ObjectTransformChanged);
            }
            input.ReadMessage(subBuilder);
            ObjectTransformChanged = subBuilder;
            break;
          }
          case 18: {
            global::ArenaServices.Event3D_ObjectNotification subBuilder = new global::ArenaServices.Event3D_ObjectNotification();
            if (eventCase_ == EventOneofCase.ObjectNotification) {
              subBuilder.MergeFrom(ObjectNotification);
            }
            input.ReadMessage(subBuilder);
            ObjectNotification = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event3D_ObjectTransformChanged : pb::IMessage<Event3D_ObjectTransformChanged> {
    private static readonly pb::MessageParser<Event3D_ObjectTransformChanged> _parser = new pb::MessageParser<Event3D_ObjectTransformChanged>(() => new Event3D_ObjectTransformChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event3D_ObjectTransformChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D_ObjectTransformChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D_ObjectTransformChanged(Event3D_ObjectTransformChanged other) : this() {
      id_ = other.id_;
      NewTransform = other.newTransform_ != null ? other.NewTransform.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D_ObjectTransformChanged Clone() {
      return new Event3D_ObjectTransformChanged(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "new_transform" field.</summary>
    public const int NewTransformFieldNumber = 2;
    private global::ArenaServices.Transform newTransform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Transform NewTransform {
      get { return newTransform_; }
      set {
        newTransform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event3D_ObjectTransformChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event3D_ObjectTransformChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(NewTransform, other.NewTransform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (newTransform_ != null) hash ^= NewTransform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (newTransform_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewTransform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (newTransform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewTransform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event3D_ObjectTransformChanged other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.newTransform_ != null) {
        if (newTransform_ == null) {
          newTransform_ = new global::ArenaServices.Transform();
        }
        NewTransform.MergeFrom(other.NewTransform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (newTransform_ == null) {
              newTransform_ = new global::ArenaServices.Transform();
            }
            input.ReadMessage(newTransform_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event3D_ObjectNotification : pb::IMessage<Event3D_ObjectNotification> {
    private static readonly pb::MessageParser<Event3D_ObjectNotification> _parser = new pb::MessageParser<Event3D_ObjectNotification>(() => new Event3D_ObjectNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event3D_ObjectNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D_ObjectNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D_ObjectNotification(Event3D_ObjectNotification other) : this() {
      id_ = other.id_;
      spawnId_ = other.spawnId_;
      Transform = other.transform_ != null ? other.Transform.Clone() : null;
      spawn_ = other.spawn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event3D_ObjectNotification Clone() {
      return new Event3D_ObjectNotification(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "spawn_id" field.</summary>
    public const int SpawnIdFieldNumber = 2;
    private int spawnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 3;
    private global::ArenaServices.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 4;
    private bool spawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Spawn {
      get { return spawn_; }
      set {
        spawn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event3D_ObjectNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event3D_ObjectNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SpawnId != other.SpawnId) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (Spawn != other.Spawn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (Spawn != false) hash ^= Spawn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (SpawnId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpawnId);
      }
      if (transform_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Transform);
      }
      if (Spawn != false) {
        output.WriteRawTag(32);
        output.WriteBool(Spawn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SpawnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnId);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (Spawn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event3D_ObjectNotification other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::ArenaServices.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.Spawn != false) {
        Spawn = other.Spawn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            SpawnId = input.ReadInt32();
            break;
          }
          case 26: {
            if (transform_ == null) {
              transform_ = new global::ArenaServices.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 32: {
            Spawn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventMatchMaker_QueuePopped : pb::IMessage<EventMatchMaker_QueuePopped> {
    private static readonly pb::MessageParser<EventMatchMaker_QueuePopped> _parser = new pb::MessageParser<EventMatchMaker_QueuePopped>(() => new EventMatchMaker_QueuePopped());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMatchMaker_QueuePopped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMatchMaker_QueuePopped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMatchMaker_QueuePopped(EventMatchMaker_QueuePopped other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMatchMaker_QueuePopped Clone() {
      return new EventMatchMaker_QueuePopped(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMatchMaker_QueuePopped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMatchMaker_QueuePopped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMatchMaker_QueuePopped other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class EventMatchMaker_QueuePopCancelled : pb::IMessage<EventMatchMaker_QueuePopCancelled> {
    private static readonly pb::MessageParser<EventMatchMaker_QueuePopCancelled> _parser = new pb::MessageParser<EventMatchMaker_QueuePopCancelled>(() => new EventMatchMaker_QueuePopCancelled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMatchMaker_QueuePopCancelled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMatchMaker_QueuePopCancelled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMatchMaker_QueuePopCancelled(EventMatchMaker_QueuePopCancelled other) : this() {
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMatchMaker_QueuePopCancelled Clone() {
      return new EventMatchMaker_QueuePopCancelled(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::ArenaServices.QueuePopCancelled_Reason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.QueuePopCancelled_Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMatchMaker_QueuePopCancelled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMatchMaker_QueuePopCancelled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMatchMaker_QueuePopCancelled other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            reason_ = (global::ArenaServices.QueuePopCancelled_Reason) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueueStateMsg : pb::IMessage<QueueStateMsg> {
    private static readonly pb::MessageParser<QueueStateMsg> _parser = new pb::MessageParser<QueueStateMsg>(() => new QueueStateMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueStateMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueStateMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueStateMsg(QueueStateMsg other) : this() {
      authenticated_ = other.authenticated_;
      isDummy_ = other.isDummy_;
      currentState_ = other.currentState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueStateMsg Clone() {
      return new QueueStateMsg(this);
    }

    /// <summary>Field number for the "authenticated" field.</summary>
    public const int AuthenticatedFieldNumber = 1;
    private bool authenticated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authenticated {
      get { return authenticated_; }
      set {
        authenticated_ = value;
      }
    }

    /// <summary>Field number for the "is_dummy" field.</summary>
    public const int IsDummyFieldNumber = 2;
    private bool isDummy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDummy {
      get { return isDummy_; }
      set {
        isDummy_ = value;
      }
    }

    /// <summary>Field number for the "current_state" field.</summary>
    public const int CurrentStateFieldNumber = 3;
    private global::ArenaServices.QueueState currentState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.QueueState CurrentState {
      get { return currentState_; }
      set {
        currentState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueStateMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueStateMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Authenticated != other.Authenticated) return false;
      if (IsDummy != other.IsDummy) return false;
      if (CurrentState != other.CurrentState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Authenticated != false) hash ^= Authenticated.GetHashCode();
      if (IsDummy != false) hash ^= IsDummy.GetHashCode();
      if (CurrentState != 0) hash ^= CurrentState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Authenticated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Authenticated);
      }
      if (IsDummy != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDummy);
      }
      if (CurrentState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CurrentState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Authenticated != false) {
        size += 1 + 1;
      }
      if (IsDummy != false) {
        size += 1 + 1;
      }
      if (CurrentState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueStateMsg other) {
      if (other == null) {
        return;
      }
      if (other.Authenticated != false) {
        Authenticated = other.Authenticated;
      }
      if (other.IsDummy != false) {
        IsDummy = other.IsDummy;
      }
      if (other.CurrentState != 0) {
        CurrentState = other.CurrentState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Authenticated = input.ReadBool();
            break;
          }
          case 16: {
            IsDummy = input.ReadBool();
            break;
          }
          case 24: {
            currentState_ = (global::ArenaServices.QueueState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueueAttempt : pb::IMessage<QueueAttempt> {
    private static readonly pb::MessageParser<QueueAttempt> _parser = new pb::MessageParser<QueueAttempt>(() => new QueueAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueAttempt(QueueAttempt other) : this() {
      matchMode_ = other.matchMode_;
      arena_ = other.arena_;
      teamSize_ = other.teamSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueAttempt Clone() {
      return new QueueAttempt(this);
    }

    /// <summary>Field number for the "match_mode" field.</summary>
    public const int MatchModeFieldNumber = 1;
    private global::ArenaServices.MatchMode matchMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.MatchMode MatchMode {
      get { return matchMode_; }
      set {
        matchMode_ = value;
      }
    }

    /// <summary>Field number for the "arena" field.</summary>
    public const int ArenaFieldNumber = 2;
    private global::ArenaServices.Arena arena_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.Arena Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    /// <summary>Field number for the "team_size" field.</summary>
    public const int TeamSizeFieldNumber = 3;
    private global::ArenaServices.TeamSize teamSize_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.TeamSize TeamSize {
      get { return teamSize_; }
      set {
        teamSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchMode != other.MatchMode) return false;
      if (Arena != other.Arena) return false;
      if (TeamSize != other.TeamSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchMode != 0) hash ^= MatchMode.GetHashCode();
      if (Arena != 0) hash ^= Arena.GetHashCode();
      if (TeamSize != 0) hash ^= TeamSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchMode);
      }
      if (Arena != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Arena);
      }
      if (TeamSize != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TeamSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchMode);
      }
      if (Arena != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Arena);
      }
      if (TeamSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueAttempt other) {
      if (other == null) {
        return;
      }
      if (other.MatchMode != 0) {
        MatchMode = other.MatchMode;
      }
      if (other.Arena != 0) {
        Arena = other.Arena;
      }
      if (other.TeamSize != 0) {
        TeamSize = other.TeamSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            matchMode_ = (global::ArenaServices.MatchMode) input.ReadEnum();
            break;
          }
          case 16: {
            arena_ = (global::ArenaServices.Arena) input.ReadEnum();
            break;
          }
          case 24: {
            teamSize_ = (global::ArenaServices.TeamSize) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnswerMatchAttempt : pb::IMessage<AnswerMatchAttempt> {
    private static readonly pb::MessageParser<AnswerMatchAttempt> _parser = new pb::MessageParser<AnswerMatchAttempt>(() => new AnswerMatchAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnswerMatchAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnswerMatchAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnswerMatchAttempt(AnswerMatchAttempt other) : this() {
      accepted_ = other.accepted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnswerMatchAttempt Clone() {
      return new AnswerMatchAttempt(this);
    }

    /// <summary>Field number for the "accepted" field.</summary>
    public const int AcceptedFieldNumber = 1;
    private bool accepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accepted {
      get { return accepted_; }
      set {
        accepted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnswerMatchAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnswerMatchAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accepted != other.Accepted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accepted != false) hash ^= Accepted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accepted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accepted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accepted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnswerMatchAttempt other) {
      if (other == null) {
        return;
      }
      if (other.Accepted != false) {
        Accepted = other.Accepted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accepted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveQueueAttempt : pb::IMessage<LeaveQueueAttempt> {
    private static readonly pb::MessageParser<LeaveQueueAttempt> _parser = new pb::MessageParser<LeaveQueueAttempt>(() => new LeaveQueueAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveQueueAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveQueueAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveQueueAttempt(LeaveQueueAttempt other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveQueueAttempt Clone() {
      return new LeaveQueueAttempt(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveQueueAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveQueueAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveQueueAttempt other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BaseServerSubscriptionAttempt : pb::IMessage<BaseServerSubscriptionAttempt> {
    private static readonly pb::MessageParser<BaseServerSubscriptionAttempt> _parser = new pb::MessageParser<BaseServerSubscriptionAttempt>(() => new BaseServerSubscriptionAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseServerSubscriptionAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseServerSubscriptionAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseServerSubscriptionAttempt(BaseServerSubscriptionAttempt other) : this() {
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseServerSubscriptionAttempt Clone() {
      return new BaseServerSubscriptionAttempt(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseServerSubscriptionAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseServerSubscriptionAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseServerSubscriptionAttempt other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventBase : pb::IMessage<EventBase> {
    private static readonly pb::MessageParser<EventBase> _parser = new pb::MessageParser<EventBase>(() => new EventBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBase(EventBase other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.SubscriptionSuccessful:
          SubscriptionSuccessful = other.SubscriptionSuccessful.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBase Clone() {
      return new EventBase(this);
    }

    /// <summary>Field number for the "subscription_successful" field.</summary>
    public const int SubscriptionSuccessfulFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.EventBase_SubscriptionSuccessful SubscriptionSuccessful {
      get { return eventCase_ == EventOneofCase.SubscriptionSuccessful ? (global::ArenaServices.EventBase_SubscriptionSuccessful) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SubscriptionSuccessful;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      SubscriptionSuccessful = 1,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SubscriptionSuccessful, other.SubscriptionSuccessful)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.SubscriptionSuccessful) hash ^= SubscriptionSuccessful.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.SubscriptionSuccessful) {
        output.WriteRawTag(10);
        output.WriteMessage(SubscriptionSuccessful);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.SubscriptionSuccessful) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscriptionSuccessful);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventBase other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.SubscriptionSuccessful:
          if (SubscriptionSuccessful == null) {
            SubscriptionSuccessful = new global::ArenaServices.EventBase_SubscriptionSuccessful();
          }
          SubscriptionSuccessful.MergeFrom(other.SubscriptionSuccessful);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ArenaServices.EventBase_SubscriptionSuccessful subBuilder = new global::ArenaServices.EventBase_SubscriptionSuccessful();
            if (eventCase_ == EventOneofCase.SubscriptionSuccessful) {
              subBuilder.MergeFrom(SubscriptionSuccessful);
            }
            input.ReadMessage(subBuilder);
            SubscriptionSuccessful = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventBase_SubscriptionSuccessful : pb::IMessage<EventBase_SubscriptionSuccessful> {
    private static readonly pb::MessageParser<EventBase_SubscriptionSuccessful> _parser = new pb::MessageParser<EventBase_SubscriptionSuccessful>(() => new EventBase_SubscriptionSuccessful());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventBase_SubscriptionSuccessful> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBase_SubscriptionSuccessful() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBase_SubscriptionSuccessful(EventBase_SubscriptionSuccessful other) : this() {
      sessionToken_ = other.sessionToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBase_SubscriptionSuccessful Clone() {
      return new EventBase_SubscriptionSuccessful(this);
    }

    /// <summary>Field number for the "session_token" field.</summary>
    public const int SessionTokenFieldNumber = 1;
    private string sessionToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionToken {
      get { return sessionToken_; }
      set {
        sessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventBase_SubscriptionSuccessful);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventBase_SubscriptionSuccessful other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionToken != other.SessionToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionToken.Length != 0) hash ^= SessionToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventBase_SubscriptionSuccessful other) {
      if (other == null) {
        return;
      }
      if (other.SessionToken.Length != 0) {
        SessionToken = other.SessionToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventArena : pb::IMessage<EventArena> {
    private static readonly pb::MessageParser<EventArena> _parser = new pb::MessageParser<EventArena>(() => new EventArena());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventArena> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena(EventArena other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.PlayerDecl:
          PlayerDecl = other.PlayerDecl.Clone();
          break;
        case EventOneofCase.PlayerDced:
          PlayerDced = other.PlayerDced.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena Clone() {
      return new EventArena(this);
    }

    /// <summary>Field number for the "player_decl" field.</summary>
    public const int PlayerDeclFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.EventArena_PlayerDecl PlayerDecl {
      get { return eventCase_ == EventOneofCase.PlayerDecl ? (global::ArenaServices.EventArena_PlayerDecl) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.PlayerDecl;
      }
    }

    /// <summary>Field number for the "player_dced" field.</summary>
    public const int PlayerDcedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArenaServices.EventArena_PlayerDisconnected PlayerDced {
      get { return eventCase_ == EventOneofCase.PlayerDced ? (global::ArenaServices.EventArena_PlayerDisconnected) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.PlayerDced;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      PlayerDecl = 1,
      PlayerDced = 2,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventArena);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventArena other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerDecl, other.PlayerDecl)) return false;
      if (!object.Equals(PlayerDced, other.PlayerDced)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.PlayerDecl) hash ^= PlayerDecl.GetHashCode();
      if (eventCase_ == EventOneofCase.PlayerDced) hash ^= PlayerDced.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.PlayerDecl) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerDecl);
      }
      if (eventCase_ == EventOneofCase.PlayerDced) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerDced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.PlayerDecl) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerDecl);
      }
      if (eventCase_ == EventOneofCase.PlayerDced) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerDced);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventArena other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.PlayerDecl:
          if (PlayerDecl == null) {
            PlayerDecl = new global::ArenaServices.EventArena_PlayerDecl();
          }
          PlayerDecl.MergeFrom(other.PlayerDecl);
          break;
        case EventOneofCase.PlayerDced:
          if (PlayerDced == null) {
            PlayerDced = new global::ArenaServices.EventArena_PlayerDisconnected();
          }
          PlayerDced.MergeFrom(other.PlayerDced);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ArenaServices.EventArena_PlayerDecl subBuilder = new global::ArenaServices.EventArena_PlayerDecl();
            if (eventCase_ == EventOneofCase.PlayerDecl) {
              subBuilder.MergeFrom(PlayerDecl);
            }
            input.ReadMessage(subBuilder);
            PlayerDecl = subBuilder;
            break;
          }
          case 18: {
            global::ArenaServices.EventArena_PlayerDisconnected subBuilder = new global::ArenaServices.EventArena_PlayerDisconnected();
            if (eventCase_ == EventOneofCase.PlayerDced) {
              subBuilder.MergeFrom(PlayerDced);
            }
            input.ReadMessage(subBuilder);
            PlayerDced = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventArena_PlayerDecl : pb::IMessage<EventArena_PlayerDecl> {
    private static readonly pb::MessageParser<EventArena_PlayerDecl> _parser = new pb::MessageParser<EventArena_PlayerDecl>(() => new EventArena_PlayerDecl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventArena_PlayerDecl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena_PlayerDecl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena_PlayerDecl(EventArena_PlayerDecl other) : this() {
      left_ = other.left_;
      leftPlayers_ = other.leftPlayers_.Clone();
      rightPlayers_ = other.rightPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena_PlayerDecl Clone() {
      return new EventArena_PlayerDecl(this);
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 1;
    private bool left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "left_players" field.</summary>
    public const int LeftPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ArenaServices.Player> _repeated_leftPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::ArenaServices.Player.Parser);
    private readonly pbc::RepeatedField<global::ArenaServices.Player> leftPlayers_ = new pbc::RepeatedField<global::ArenaServices.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ArenaServices.Player> LeftPlayers {
      get { return leftPlayers_; }
    }

    /// <summary>Field number for the "right_players" field.</summary>
    public const int RightPlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ArenaServices.Player> _repeated_rightPlayers_codec
        = pb::FieldCodec.ForMessage(26, global::ArenaServices.Player.Parser);
    private readonly pbc::RepeatedField<global::ArenaServices.Player> rightPlayers_ = new pbc::RepeatedField<global::ArenaServices.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ArenaServices.Player> RightPlayers {
      get { return rightPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventArena_PlayerDecl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventArena_PlayerDecl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Left != other.Left) return false;
      if(!leftPlayers_.Equals(other.leftPlayers_)) return false;
      if(!rightPlayers_.Equals(other.rightPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Left != false) hash ^= Left.GetHashCode();
      hash ^= leftPlayers_.GetHashCode();
      hash ^= rightPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Left != false) {
        output.WriteRawTag(8);
        output.WriteBool(Left);
      }
      leftPlayers_.WriteTo(output, _repeated_leftPlayers_codec);
      rightPlayers_.WriteTo(output, _repeated_rightPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Left != false) {
        size += 1 + 1;
      }
      size += leftPlayers_.CalculateSize(_repeated_leftPlayers_codec);
      size += rightPlayers_.CalculateSize(_repeated_rightPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventArena_PlayerDecl other) {
      if (other == null) {
        return;
      }
      if (other.Left != false) {
        Left = other.Left;
      }
      leftPlayers_.Add(other.leftPlayers_);
      rightPlayers_.Add(other.rightPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Left = input.ReadBool();
            break;
          }
          case 18: {
            leftPlayers_.AddEntriesFrom(input, _repeated_leftPlayers_codec);
            break;
          }
          case 26: {
            rightPlayers_.AddEntriesFrom(input, _repeated_rightPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventArena_PlayerDisconnected : pb::IMessage<EventArena_PlayerDisconnected> {
    private static readonly pb::MessageParser<EventArena_PlayerDisconnected> _parser = new pb::MessageParser<EventArena_PlayerDisconnected>(() => new EventArena_PlayerDisconnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventArena_PlayerDisconnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArenaServices.ArenaServicesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena_PlayerDisconnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena_PlayerDisconnected(EventArena_PlayerDisconnected other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventArena_PlayerDisconnected Clone() {
      return new EventArena_PlayerDisconnected(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventArena_PlayerDisconnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventArena_PlayerDisconnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventArena_PlayerDisconnected other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
