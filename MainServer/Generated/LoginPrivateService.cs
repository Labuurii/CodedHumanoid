// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: login_private_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LoginServices {

  /// <summary>Holder for reflection information generated from login_private_service.proto</summary>
  public static partial class LoginPrivateServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for login_private_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginPrivateServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtsb2dpbl9wcml2YXRlX3NlcnZpY2UucHJvdG8SDmxvZ2luX3NlcnZpY2Vz",
            "IjMKEUNvbm5lY3Rpb25BdHRlbXB0Eg4KBmFwcF9pZBgBIAEoCRIOCgZzZWNy",
            "ZXQYAiABKAkijwEKDFByaXZhdGVFdmVudBIzCgxsb2dpbl9yZXN1bHQYASAB",
            "KAsyGy5sb2dpbl9zZXJ2aWNlcy5Mb2dpblJlc3VsdEgAEkEKE3BsYXllcl9k",
            "aXNjb25uZWN0ZWQYAiABKAsyIi5sb2dpbl9zZXJ2aWNlcy5QbGF5ZXJEaXNj",
            "b25uZWN0ZWRIAEIHCgVldmVudCItCgtMb2dpblJlc3VsdBIPCgdzdWNjZXNz",
            "GAEgASgIEg0KBXRva2VuGAIgASgJIioKElBsYXllckRpc2Nvbm5lY3RlZBIU",
            "CgxwZXJtYW5lbnRfaWQYASABKAkiMwoUVGFrZU93bmVyc2hpcEF0dGVtcHQS",
            "GwoTcGxheWVyX3Blcm1hbmVudF9pZBgBIAEoCSLBAQoTVGFrZU93bmVyc2hp",
            "cFJlc3VsdBI6CgZyZXN1bHQYASABKA4yKi5sb2dpbl9zZXJ2aWNlcy5UYWtl",
            "T3duZXJzaGlwUmVzdWx0LlJlc3VsdCJuCgZSZXN1bHQSCwoHc3VjY2VzcxAA",
            "EhUKEWludmFsaWRfcGxheWVyX2lkEAESDAoIbm90X2F1dGgQAhIVChFhbHJl",
            "YWR5X2hhc19vd25lchADEhsKF2FscmVhZHlfb3duZWRfYnlfc2VydmVyEAQi",
            "NAoVTGVhdmVPd25lcnNoaXBBdHRlbXB0EhsKE3BsYXllcl9wZXJtYW5lbnRf",
            "aWQYASABKAkinQEKFExlYXZlT3duZXJzaGlwUmVzdWx0EjsKBnJlc3VsdBgB",
            "IAEoDjIrLmxvZ2luX3NlcnZpY2VzLkxlYXZlT3duZXJzaGlwUmVzdWx0LlJl",
            "c3VsdCJICgZSZXN1bHQSCwoHU3VjY2VzcxAAEhUKEWludmFsaWRfcGxheWVy",
            "X2lkEAESDAoIbm90X2F1dGgQAhIMCghub19vd25lchADMqQCChNMb2dpblBy",
            "aXZhdGVTZXJ2aWNlEk4KB0Nvbm5lY3QSIS5sb2dpbl9zZXJ2aWNlcy5Db25u",
            "ZWN0aW9uQXR0ZW1wdBocLmxvZ2luX3NlcnZpY2VzLlByaXZhdGVFdmVudCIA",
            "MAESXAoNVGFrZU93bmVyc2hpcBIkLmxvZ2luX3NlcnZpY2VzLlRha2VPd25l",
            "cnNoaXBBdHRlbXB0GiMubG9naW5fc2VydmljZXMuVGFrZU93bmVyc2hpcFJl",
            "c3VsdCIAEl8KDkxlYXZlT3duZXJzaGlwEiUubG9naW5fc2VydmljZXMuTGVh",
            "dmVPd25lcnNoaXBBdHRlbXB0GiQubG9naW5fc2VydmljZXMuTGVhdmVPd25l",
            "cnNoaXBSZXN1bHQiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.ConnectionAttempt), global::LoginServices.ConnectionAttempt.Parser, new[]{ "AppId", "Secret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.PrivateEvent), global::LoginServices.PrivateEvent.Parser, new[]{ "LoginResult", "PlayerDisconnected" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.LoginResult), global::LoginServices.LoginResult.Parser, new[]{ "Success", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.PlayerDisconnected), global::LoginServices.PlayerDisconnected.Parser, new[]{ "PermanentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.TakeOwnershipAttempt), global::LoginServices.TakeOwnershipAttempt.Parser, new[]{ "PlayerPermanentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.TakeOwnershipResult), global::LoginServices.TakeOwnershipResult.Parser, new[]{ "Result" }, null, new[]{ typeof(global::LoginServices.TakeOwnershipResult.Types.Result) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.LeaveOwnershipAttempt), global::LoginServices.LeaveOwnershipAttempt.Parser, new[]{ "PlayerPermanentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LoginServices.LeaveOwnershipResult), global::LoginServices.LeaveOwnershipResult.Parser, new[]{ "Result" }, null, new[]{ typeof(global::LoginServices.LeaveOwnershipResult.Types.Result) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConnectionAttempt : pb::IMessage<ConnectionAttempt> {
    private static readonly pb::MessageParser<ConnectionAttempt> _parser = new pb::MessageParser<ConnectionAttempt>(() => new ConnectionAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAttempt(ConnectionAttempt other) : this() {
      appId_ = other.appId_;
      secret_ = other.secret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAttempt Clone() {
      return new ConnectionAttempt(this);
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 1;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 2;
    private string secret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (Secret != other.Secret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppId);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Secret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionAttempt other) {
      if (other == null) {
        return;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppId = input.ReadString();
            break;
          }
          case 18: {
            Secret = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrivateEvent : pb::IMessage<PrivateEvent> {
    private static readonly pb::MessageParser<PrivateEvent> _parser = new pb::MessageParser<PrivateEvent>(() => new PrivateEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivateEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateEvent(PrivateEvent other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.LoginResult:
          LoginResult = other.LoginResult.Clone();
          break;
        case EventOneofCase.PlayerDisconnected:
          PlayerDisconnected = other.PlayerDisconnected.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateEvent Clone() {
      return new PrivateEvent(this);
    }

    /// <summary>Field number for the "login_result" field.</summary>
    public const int LoginResultFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LoginServices.LoginResult LoginResult {
      get { return eventCase_ == EventOneofCase.LoginResult ? (global::LoginServices.LoginResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.LoginResult;
      }
    }

    /// <summary>Field number for the "player_disconnected" field.</summary>
    public const int PlayerDisconnectedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LoginServices.PlayerDisconnected PlayerDisconnected {
      get { return eventCase_ == EventOneofCase.PlayerDisconnected ? (global::LoginServices.PlayerDisconnected) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.PlayerDisconnected;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      LoginResult = 1,
      PlayerDisconnected = 2,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrivateEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrivateEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LoginResult, other.LoginResult)) return false;
      if (!object.Equals(PlayerDisconnected, other.PlayerDisconnected)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.LoginResult) hash ^= LoginResult.GetHashCode();
      if (eventCase_ == EventOneofCase.PlayerDisconnected) hash ^= PlayerDisconnected.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.LoginResult) {
        output.WriteRawTag(10);
        output.WriteMessage(LoginResult);
      }
      if (eventCase_ == EventOneofCase.PlayerDisconnected) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerDisconnected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.LoginResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResult);
      }
      if (eventCase_ == EventOneofCase.PlayerDisconnected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerDisconnected);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrivateEvent other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.LoginResult:
          if (LoginResult == null) {
            LoginResult = new global::LoginServices.LoginResult();
          }
          LoginResult.MergeFrom(other.LoginResult);
          break;
        case EventOneofCase.PlayerDisconnected:
          if (PlayerDisconnected == null) {
            PlayerDisconnected = new global::LoginServices.PlayerDisconnected();
          }
          PlayerDisconnected.MergeFrom(other.PlayerDisconnected);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LoginServices.LoginResult subBuilder = new global::LoginServices.LoginResult();
            if (eventCase_ == EventOneofCase.LoginResult) {
              subBuilder.MergeFrom(LoginResult);
            }
            input.ReadMessage(subBuilder);
            LoginResult = subBuilder;
            break;
          }
          case 18: {
            global::LoginServices.PlayerDisconnected subBuilder = new global::LoginServices.PlayerDisconnected();
            if (eventCase_ == EventOneofCase.PlayerDisconnected) {
              subBuilder.MergeFrom(PlayerDisconnected);
            }
            input.ReadMessage(subBuilder);
            PlayerDisconnected = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResult : pb::IMessage<LoginResult> {
    private static readonly pb::MessageParser<LoginResult> _parser = new pb::MessageParser<LoginResult>(() => new LoginResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult(LoginResult other) : this() {
      success_ = other.success_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult Clone() {
      return new LoginResult(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResult other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerDisconnected : pb::IMessage<PlayerDisconnected> {
    private static readonly pb::MessageParser<PlayerDisconnected> _parser = new pb::MessageParser<PlayerDisconnected>(() => new PlayerDisconnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerDisconnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDisconnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDisconnected(PlayerDisconnected other) : this() {
      permanentId_ = other.permanentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDisconnected Clone() {
      return new PlayerDisconnected(this);
    }

    /// <summary>Field number for the "permanent_id" field.</summary>
    public const int PermanentIdFieldNumber = 1;
    private string permanentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermanentId {
      get { return permanentId_; }
      set {
        permanentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerDisconnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerDisconnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PermanentId != other.PermanentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PermanentId.Length != 0) hash ^= PermanentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PermanentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PermanentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PermanentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermanentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerDisconnected other) {
      if (other == null) {
        return;
      }
      if (other.PermanentId.Length != 0) {
        PermanentId = other.PermanentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PermanentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeOwnershipAttempt : pb::IMessage<TakeOwnershipAttempt> {
    private static readonly pb::MessageParser<TakeOwnershipAttempt> _parser = new pb::MessageParser<TakeOwnershipAttempt>(() => new TakeOwnershipAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeOwnershipAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOwnershipAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOwnershipAttempt(TakeOwnershipAttempt other) : this() {
      playerPermanentId_ = other.playerPermanentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOwnershipAttempt Clone() {
      return new TakeOwnershipAttempt(this);
    }

    /// <summary>Field number for the "player_permanent_id" field.</summary>
    public const int PlayerPermanentIdFieldNumber = 1;
    private string playerPermanentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerPermanentId {
      get { return playerPermanentId_; }
      set {
        playerPermanentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeOwnershipAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeOwnershipAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerPermanentId != other.PlayerPermanentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerPermanentId.Length != 0) hash ^= PlayerPermanentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerPermanentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerPermanentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerPermanentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerPermanentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeOwnershipAttempt other) {
      if (other == null) {
        return;
      }
      if (other.PlayerPermanentId.Length != 0) {
        PlayerPermanentId = other.PlayerPermanentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerPermanentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeOwnershipResult : pb::IMessage<TakeOwnershipResult> {
    private static readonly pb::MessageParser<TakeOwnershipResult> _parser = new pb::MessageParser<TakeOwnershipResult>(() => new TakeOwnershipResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeOwnershipResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOwnershipResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOwnershipResult(TakeOwnershipResult other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOwnershipResult Clone() {
      return new TakeOwnershipResult(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::LoginServices.TakeOwnershipResult.Types.Result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LoginServices.TakeOwnershipResult.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeOwnershipResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeOwnershipResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeOwnershipResult other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            result_ = (global::LoginServices.TakeOwnershipResult.Types.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TakeOwnershipResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("success")] Success = 0,
        [pbr::OriginalName("invalid_player_id")] InvalidPlayerId = 1,
        [pbr::OriginalName("not_auth")] NotAuth = 2,
        [pbr::OriginalName("already_has_owner")] AlreadyHasOwner = 3,
        [pbr::OriginalName("already_owned_by_server")] AlreadyOwnedByServer = 4,
      }

    }
    #endregion

  }

  public sealed partial class LeaveOwnershipAttempt : pb::IMessage<LeaveOwnershipAttempt> {
    private static readonly pb::MessageParser<LeaveOwnershipAttempt> _parser = new pb::MessageParser<LeaveOwnershipAttempt>(() => new LeaveOwnershipAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveOwnershipAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveOwnershipAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveOwnershipAttempt(LeaveOwnershipAttempt other) : this() {
      playerPermanentId_ = other.playerPermanentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveOwnershipAttempt Clone() {
      return new LeaveOwnershipAttempt(this);
    }

    /// <summary>Field number for the "player_permanent_id" field.</summary>
    public const int PlayerPermanentIdFieldNumber = 1;
    private string playerPermanentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerPermanentId {
      get { return playerPermanentId_; }
      set {
        playerPermanentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveOwnershipAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveOwnershipAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerPermanentId != other.PlayerPermanentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerPermanentId.Length != 0) hash ^= PlayerPermanentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerPermanentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerPermanentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerPermanentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerPermanentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveOwnershipAttempt other) {
      if (other == null) {
        return;
      }
      if (other.PlayerPermanentId.Length != 0) {
        PlayerPermanentId = other.PlayerPermanentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerPermanentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveOwnershipResult : pb::IMessage<LeaveOwnershipResult> {
    private static readonly pb::MessageParser<LeaveOwnershipResult> _parser = new pb::MessageParser<LeaveOwnershipResult>(() => new LeaveOwnershipResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveOwnershipResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LoginServices.LoginPrivateServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveOwnershipResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveOwnershipResult(LeaveOwnershipResult other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveOwnershipResult Clone() {
      return new LeaveOwnershipResult(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::LoginServices.LeaveOwnershipResult.Types.Result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LoginServices.LeaveOwnershipResult.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveOwnershipResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveOwnershipResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveOwnershipResult other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            result_ = (global::LoginServices.LeaveOwnershipResult.Types.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LeaveOwnershipResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("invalid_player_id")] InvalidPlayerId = 1,
        [pbr::OriginalName("not_auth")] NotAuth = 2,
        [pbr::OriginalName("no_owner")] NoOwner = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
