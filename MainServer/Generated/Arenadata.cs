// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arenadata.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Arenadata {

  /// <summary>Holder for reflection information generated from arenadata.proto</summary>
  public static partial class ArenadataReflection {

    #region Descriptor
    /// <summary>File descriptor for arenadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArenadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hcmVuYWRhdGEucHJvdG8SCWFyZW5hZGF0YSKKAQoJQXJlbmFEYXRhEicK",
            "DXN0YXRpY19hY3RvcnMYASADKAsyEC5hcmVuYWRhdGEuQWN0b3ISKAoOZHlu",
            "YW1pY19hY3RvcnMYAiADKAsyEC5hcmVuYWRhdGEuQWN0b3ISKgoQc3Bhd25h",
            "YmxlX2FjdG9ycxgDIAMoCzIQLmFyZW5hZGF0YS5BY3RvciKDAQoFQWN0b3IS",
            "JwoJdHJhbnNmb3JtGAEgASgLMhQuYXJlbmFkYXRhLlRyYW5zZm9ybRIMCgRt",
            "YXNzGAMgASgCEhsKE2FmZmVjdGVkX2J5X2dyYXZpdHkYBCABKAgSJgoJY29s",
            "bGlkZXJzGAIgAygLMhMuYXJlbmFkYXRhLkNvbGxpZGVyIrQBCghDb2xsaWRl",
            "chIiCgNib3gYASABKAsyEy5hcmVuYWRhdGEuQm94U2hhcGVIABIoCgZzcGhl",
            "cmUYAiABKAsyFi5hcmVuYWRhdGEuU3BoZXJlU2hhcGVIABIqCgdjYXBzdWxl",
            "GAQgASgLMhcuYXJlbmFkYXRhLkNhcHN1bGVTaGFwZUgAEiUKCGNoaWxkcmVu",
            "GAMgAygLMhMuYXJlbmFkYXRhLkNvbGxpZGVyQgcKBXNoYXBlIioKB1ZlY3Rv",
            "cjMSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiOAoKUXVhdGVy",
            "bmlvbhIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAhIJCgF3GAQg",
            "ASgCIq4BCglUcmFuc2Zvcm0SJAoIcG9zaXRpb24YASABKAsyEi5hcmVuYWRh",
            "dGEuVmVjdG9yMxIkCgh2ZWxvY2l0eRgCIAEoCzISLmFyZW5hZGF0YS5WZWN0",
            "b3IzEicKCHJvdGF0aW9uGAMgASgLMhUuYXJlbmFkYXRhLlF1YXRlcm5pb24S",
            "LAoQYW5ndWxhcl92ZWxvY2l0eRgEIAEoCzISLmFyZW5hZGF0YS5WZWN0b3Iz",
            "IoYBCghCb3hTaGFwZRIiCgZjZW50ZXIYASABKAsyEi5hcmVuYWRhdGEuVmVj",
            "dG9yMxInCghyb3RhdGlvbhgFIAEoCzIVLmFyZW5hZGF0YS5RdWF0ZXJuaW9u",
            "Eg0KBXdpZHRoGAIgASgCEg4KBmhlaWdodBgDIAEoAhIOCgZsZW5ndGgYBCAB",
            "KAIiagoLU3BoZXJlU2hhcGUSIgoGY2VudGVyGAEgASgLMhIuYXJlbmFkYXRh",
            "LlZlY3RvcjMSJwoIcm90YXRpb24YAyABKAsyFS5hcmVuYWRhdGEuUXVhdGVy",
            "bmlvbhIOCgZyYWRpdXMYAiABKAIiewoMQ2Fwc3VsZVNoYXBlEiIKBmNlbnRl",
            "chgBIAEoCzISLmFyZW5hZGF0YS5WZWN0b3IzEicKCHJvdGF0aW9uGAIgASgL",
            "MhUuYXJlbmFkYXRhLlF1YXRlcm5pb24SDgoGcmFkaXVzGAMgASgCEg4KBmhl",
            "aWdodBgEIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.ArenaData), global::Arenadata.ArenaData.Parser, new[]{ "StaticActors", "DynamicActors", "SpawnableActors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.Actor), global::Arenadata.Actor.Parser, new[]{ "Transform", "Mass", "AffectedByGravity", "Colliders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.Collider), global::Arenadata.Collider.Parser, new[]{ "Box", "Sphere", "Capsule", "Children" }, new[]{ "Shape" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.Vector3), global::Arenadata.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.Quaternion), global::Arenadata.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.Transform), global::Arenadata.Transform.Parser, new[]{ "Position", "Velocity", "Rotation", "AngularVelocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.BoxShape), global::Arenadata.BoxShape.Parser, new[]{ "Center", "Rotation", "Width", "Height", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.SphereShape), global::Arenadata.SphereShape.Parser, new[]{ "Center", "Rotation", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Arenadata.CapsuleShape), global::Arenadata.CapsuleShape.Parser, new[]{ "Center", "Rotation", "Radius", "Height" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ArenaData : pb::IMessage<ArenaData> {
    private static readonly pb::MessageParser<ArenaData> _parser = new pb::MessageParser<ArenaData>(() => new ArenaData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaData(ArenaData other) : this() {
      staticActors_ = other.staticActors_.Clone();
      dynamicActors_ = other.dynamicActors_.Clone();
      spawnableActors_ = other.spawnableActors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaData Clone() {
      return new ArenaData(this);
    }

    /// <summary>Field number for the "static_actors" field.</summary>
    public const int StaticActorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Arenadata.Actor> _repeated_staticActors_codec
        = pb::FieldCodec.ForMessage(10, global::Arenadata.Actor.Parser);
    private readonly pbc::RepeatedField<global::Arenadata.Actor> staticActors_ = new pbc::RepeatedField<global::Arenadata.Actor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Arenadata.Actor> StaticActors {
      get { return staticActors_; }
    }

    /// <summary>Field number for the "dynamic_actors" field.</summary>
    public const int DynamicActorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Arenadata.Actor> _repeated_dynamicActors_codec
        = pb::FieldCodec.ForMessage(18, global::Arenadata.Actor.Parser);
    private readonly pbc::RepeatedField<global::Arenadata.Actor> dynamicActors_ = new pbc::RepeatedField<global::Arenadata.Actor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Arenadata.Actor> DynamicActors {
      get { return dynamicActors_; }
    }

    /// <summary>Field number for the "spawnable_actors" field.</summary>
    public const int SpawnableActorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Arenadata.Actor> _repeated_spawnableActors_codec
        = pb::FieldCodec.ForMessage(26, global::Arenadata.Actor.Parser);
    private readonly pbc::RepeatedField<global::Arenadata.Actor> spawnableActors_ = new pbc::RepeatedField<global::Arenadata.Actor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Arenadata.Actor> SpawnableActors {
      get { return spawnableActors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!staticActors_.Equals(other.staticActors_)) return false;
      if(!dynamicActors_.Equals(other.dynamicActors_)) return false;
      if(!spawnableActors_.Equals(other.spawnableActors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= staticActors_.GetHashCode();
      hash ^= dynamicActors_.GetHashCode();
      hash ^= spawnableActors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      staticActors_.WriteTo(output, _repeated_staticActors_codec);
      dynamicActors_.WriteTo(output, _repeated_dynamicActors_codec);
      spawnableActors_.WriteTo(output, _repeated_spawnableActors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += staticActors_.CalculateSize(_repeated_staticActors_codec);
      size += dynamicActors_.CalculateSize(_repeated_dynamicActors_codec);
      size += spawnableActors_.CalculateSize(_repeated_spawnableActors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaData other) {
      if (other == null) {
        return;
      }
      staticActors_.Add(other.staticActors_);
      dynamicActors_.Add(other.dynamicActors_);
      spawnableActors_.Add(other.spawnableActors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            staticActors_.AddEntriesFrom(input, _repeated_staticActors_codec);
            break;
          }
          case 18: {
            dynamicActors_.AddEntriesFrom(input, _repeated_dynamicActors_codec);
            break;
          }
          case 26: {
            spawnableActors_.AddEntriesFrom(input, _repeated_spawnableActors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Actor : pb::IMessage<Actor> {
    private static readonly pb::MessageParser<Actor> _parser = new pb::MessageParser<Actor>(() => new Actor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Actor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor(Actor other) : this() {
      Transform = other.transform_ != null ? other.Transform.Clone() : null;
      mass_ = other.mass_;
      affectedByGravity_ = other.affectedByGravity_;
      colliders_ = other.colliders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor Clone() {
      return new Actor(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Arenadata.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 3;
    private float mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "affected_by_gravity" field.</summary>
    public const int AffectedByGravityFieldNumber = 4;
    private bool affectedByGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AffectedByGravity {
      get { return affectedByGravity_; }
      set {
        affectedByGravity_ = value;
      }
    }

    /// <summary>Field number for the "colliders" field.</summary>
    public const int CollidersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Arenadata.Collider> _repeated_colliders_codec
        = pb::FieldCodec.ForMessage(18, global::Arenadata.Collider.Parser);
    private readonly pbc::RepeatedField<global::Arenadata.Collider> colliders_ = new pbc::RepeatedField<global::Arenadata.Collider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Arenadata.Collider> Colliders {
      get { return colliders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Actor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Actor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      if (Mass != other.Mass) return false;
      if (AffectedByGravity != other.AffectedByGravity) return false;
      if(!colliders_.Equals(other.colliders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (Mass != 0F) hash ^= Mass.GetHashCode();
      if (AffectedByGravity != false) hash ^= AffectedByGravity.GetHashCode();
      hash ^= colliders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      colliders_.WriteTo(output, _repeated_colliders_codec);
      if (Mass != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Mass);
      }
      if (AffectedByGravity != false) {
        output.WriteRawTag(32);
        output.WriteBool(AffectedByGravity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (Mass != 0F) {
        size += 1 + 4;
      }
      if (AffectedByGravity != false) {
        size += 1 + 1;
      }
      size += colliders_.CalculateSize(_repeated_colliders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Actor other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Arenadata.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.Mass != 0F) {
        Mass = other.Mass;
      }
      if (other.AffectedByGravity != false) {
        AffectedByGravity = other.AffectedByGravity;
      }
      colliders_.Add(other.colliders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (transform_ == null) {
              transform_ = new global::Arenadata.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 18: {
            colliders_.AddEntriesFrom(input, _repeated_colliders_codec);
            break;
          }
          case 29: {
            Mass = input.ReadFloat();
            break;
          }
          case 32: {
            AffectedByGravity = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Collider : pb::IMessage<Collider> {
    private static readonly pb::MessageParser<Collider> _parser = new pb::MessageParser<Collider>(() => new Collider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Collider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collider(Collider other) : this() {
      children_ = other.children_.Clone();
      switch (other.ShapeCase) {
        case ShapeOneofCase.Box:
          Box = other.Box.Clone();
          break;
        case ShapeOneofCase.Sphere:
          Sphere = other.Sphere.Clone();
          break;
        case ShapeOneofCase.Capsule:
          Capsule = other.Capsule.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collider Clone() {
      return new Collider(this);
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.BoxShape Box {
      get { return shapeCase_ == ShapeOneofCase.Box ? (global::Arenadata.BoxShape) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Box;
      }
    }

    /// <summary>Field number for the "sphere" field.</summary>
    public const int SphereFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.SphereShape Sphere {
      get { return shapeCase_ == ShapeOneofCase.Sphere ? (global::Arenadata.SphereShape) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Sphere;
      }
    }

    /// <summary>Field number for the "capsule" field.</summary>
    public const int CapsuleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.CapsuleShape Capsule {
      get { return shapeCase_ == ShapeOneofCase.Capsule ? (global::Arenadata.CapsuleShape) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Capsule;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Arenadata.Collider> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::Arenadata.Collider.Parser);
    private readonly pbc::RepeatedField<global::Arenadata.Collider> children_ = new pbc::RepeatedField<global::Arenadata.Collider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Arenadata.Collider> Children {
      get { return children_; }
    }

    private object shape_;
    /// <summary>Enum of possible cases for the "shape" oneof.</summary>
    public enum ShapeOneofCase {
      None = 0,
      Box = 1,
      Sphere = 2,
      Capsule = 4,
    }
    private ShapeOneofCase shapeCase_ = ShapeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeOneofCase ShapeCase {
      get { return shapeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShape() {
      shapeCase_ = ShapeOneofCase.None;
      shape_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Collider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Collider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Box, other.Box)) return false;
      if (!object.Equals(Sphere, other.Sphere)) return false;
      if (!object.Equals(Capsule, other.Capsule)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (ShapeCase != other.ShapeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shapeCase_ == ShapeOneofCase.Box) hash ^= Box.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.Sphere) hash ^= Sphere.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.Capsule) hash ^= Capsule.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= (int) shapeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shapeCase_ == ShapeOneofCase.Box) {
        output.WriteRawTag(10);
        output.WriteMessage(Box);
      }
      if (shapeCase_ == ShapeOneofCase.Sphere) {
        output.WriteRawTag(18);
        output.WriteMessage(Sphere);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (shapeCase_ == ShapeOneofCase.Capsule) {
        output.WriteRawTag(34);
        output.WriteMessage(Capsule);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shapeCase_ == ShapeOneofCase.Box) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (shapeCase_ == ShapeOneofCase.Sphere) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sphere);
      }
      if (shapeCase_ == ShapeOneofCase.Capsule) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capsule);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Collider other) {
      if (other == null) {
        return;
      }
      children_.Add(other.children_);
      switch (other.ShapeCase) {
        case ShapeOneofCase.Box:
          Box = other.Box;
          break;
        case ShapeOneofCase.Sphere:
          Sphere = other.Sphere;
          break;
        case ShapeOneofCase.Capsule:
          Capsule = other.Capsule;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Arenadata.BoxShape subBuilder = new global::Arenadata.BoxShape();
            if (shapeCase_ == ShapeOneofCase.Box) {
              subBuilder.MergeFrom(Box);
            }
            input.ReadMessage(subBuilder);
            Box = subBuilder;
            break;
          }
          case 18: {
            global::Arenadata.SphereShape subBuilder = new global::Arenadata.SphereShape();
            if (shapeCase_ == ShapeOneofCase.Sphere) {
              subBuilder.MergeFrom(Sphere);
            }
            input.ReadMessage(subBuilder);
            Sphere = subBuilder;
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 34: {
            global::Arenadata.CapsuleShape subBuilder = new global::Arenadata.CapsuleShape();
            if (shapeCase_ == ShapeOneofCase.Capsule) {
              subBuilder.MergeFrom(Capsule);
            }
            input.ReadMessage(subBuilder);
            Capsule = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Arenadata.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Arenadata.Vector3 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Vector3 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Arenadata.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 4;
    private global::Arenadata.Vector3 angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Vector3 AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AngularVelocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Arenadata.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Arenadata.Vector3();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Arenadata.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Arenadata.Vector3();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Arenadata.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              velocity_ = new global::Arenadata.Vector3();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::Arenadata.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 34: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Arenadata.Vector3();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoxShape : pb::IMessage<BoxShape> {
    private static readonly pb::MessageParser<BoxShape> _parser = new pb::MessageParser<BoxShape>(() => new BoxShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoxShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxShape(BoxShape other) : this() {
      Center = other.center_ != null ? other.Center.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      length_ = other.length_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxShape Clone() {
      return new BoxShape(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Arenadata.Vector3 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Vector3 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::Arenadata.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 4;
    private float length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoxShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoxShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Length != other.Length) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      if (Length != 0F) hash ^= Length.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (Width != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Height);
      }
      if (Length != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Length);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Length != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoxShape other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::Arenadata.Vector3();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Arenadata.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Length != 0F) {
        Length = other.Length;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (center_ == null) {
              center_ = new global::Arenadata.Vector3();
            }
            input.ReadMessage(center_);
            break;
          }
          case 21: {
            Width = input.ReadFloat();
            break;
          }
          case 29: {
            Height = input.ReadFloat();
            break;
          }
          case 37: {
            Length = input.ReadFloat();
            break;
          }
          case 42: {
            if (rotation_ == null) {
              rotation_ = new global::Arenadata.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SphereShape : pb::IMessage<SphereShape> {
    private static readonly pb::MessageParser<SphereShape> _parser = new pb::MessageParser<SphereShape>(() => new SphereShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SphereShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SphereShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SphereShape(SphereShape other) : this() {
      Center = other.center_ != null ? other.Center.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      radius_ = other.radius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SphereShape Clone() {
      return new SphereShape(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Arenadata.Vector3 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Vector3 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Arenadata.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SphereShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SphereShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Radius != other.Radius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SphereShape other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::Arenadata.Vector3();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Arenadata.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (center_ == null) {
              center_ = new global::Arenadata.Vector3();
            }
            input.ReadMessage(center_);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::Arenadata.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CapsuleShape : pb::IMessage<CapsuleShape> {
    private static readonly pb::MessageParser<CapsuleShape> _parser = new pb::MessageParser<CapsuleShape>(() => new CapsuleShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CapsuleShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arenadata.ArenadataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapsuleShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapsuleShape(CapsuleShape other) : this() {
      Center = other.center_ != null ? other.Center.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      radius_ = other.radius_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapsuleShape Clone() {
      return new CapsuleShape(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Arenadata.Vector3 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Vector3 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Arenadata.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arenadata.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 3;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CapsuleShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CapsuleShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Radius != other.Radius) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CapsuleShape other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::Arenadata.Vector3();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Arenadata.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (center_ == null) {
              center_ = new global::Arenadata.Vector3();
            }
            input.ReadMessage(center_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Arenadata.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
